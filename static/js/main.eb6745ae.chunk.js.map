{"version":3,"sources":["assets/location.svg","components/Legend.js","components/Sidebar.js","components/Coordinates.js","components/MapView.js","components/Timebar.js","components/Table.js","components/StaticFilterOptions.js","components/Mapfilter.js","components/SearchBox.js","components/SearchBoxLocation.js","components/SearchBoxPartner.js","components/SearchBoxStatus.js","components/SearchBoxTopic.js","components/SearchBoxTarget.js","components/SearchBoxProjectType.js","components/Search.js","components/DataBlock.js","components/DataBlocksList.js","App.js","index.js","assets/project.svg","assets/partner.svg","assets/status.svg","assets/topic.svg","assets/SDG.png","assets/type.svg","assets/picture-placeholder.png","assets/grid.svg","assets/list.svg","assets/csv.svg"],"names":["module","exports","Legend","colors","React","createElement","className","map","layer","i","key","style","backgroundColor","src","process","alt","width","height","formatNumber","number","toLocaleString","maximumFractionDigits","calculatePercentage","value","total","toFixed","Sidebar","_ref","countryData","level1Data","level2Data","regionInfo","selectedYear","selectedMonth","appendedData","setAppendedData","useState","useEffect","mergedData","features","clickedKey","foundRow","find","feature","properties","Key","Name","Population","concat","Phase1","Percent1","parseFloat","Phase2","Percent2","Phase3","Percent3","Phase4","Percent4","Phase5","Percent5","countryCoordinates","country","coordinates","mapboxgl","accessToken","MapView","onChangeRegion","countryProjectArray","protocoleData","console","log","mapContainer","useRef","lng","setLng","lat","setLat","zoom","setZoom","hoveredRegion","setHoveredRegion","project","matchingCoordinate","_ref2","type","countryName","countProjects","geometry","layerNames","current","length","existingSource","getSource","setData","setLayoutProperty","addLayer","id","minzoom","maxzoom","paint","source","layout","addSource","data","cluster","clusterMaxZoom","clusterRadius","handleMove","getCenter","getZoom","createLayerClickHandler","e","lngLat","newHoveredRegion","name","currentZoom","maxZoom","targetZoom","easeTo","center","duration","curve","popup","remove","Popup","maxWidth","maxHeight","setLngLat","setHTML","Name_2","addTo","forEach","layerName","getLayer","setPaintProperty","yearValue","parseInt","monthValue","some","getMapboxExpression","separateLayerName","propertyName","getStripesExpression","Map","container","minZoom","cooperativeGestures","sources","url","on","addControl","NavigationControl","isMounted","ref","Timebar","onChangeYear","onChangeMonth","setSelectedYear","setSelectedMonth","handleMonthButtonClick","month","monthNumber","March","June","November","undefined","min","max","step","onChange","event","sliderValue","target","selected","Math","round","maxYear","onClick","Table","StaticFilterOptions","title","options","selectedOptions","setSelectedOptions","inputValue","setInputValue","isMenuOpen","setIsMenuOpen","isVisible","setIsVisible","handleInputChange","filteredOptions","filter","option","includes","toLowerCase","Downshift","selection","selectedItem","prevSelectedOptions","itemToString","item","isOpen","onOuterClick","getInputProps","getToggleButtonProps","getMenuProps","getItemProps","highlightedIndex","toggleMenu","position","display","Object","assign","placeholder","join","props","handleSelectAll","allOptions","index","Mapfilter","SearchBox","searchQuery","setSearchQuery","projectImage","Countries","SearchBoxLocation","selectedLocations","setSelectedLocations","locationImage","staticPartner","SearchBoxPartner","selectedPartner","setSelectedPartner","partnerImage","StatusOptions","SearchBoxStatus","selectedStatus","setSelectedStatus","statusImage","TopicOptions","SearchBoxTopic","selectedTopics","setSelectedTopics","topicImage","TargetOptions","SearchBoxTarget","selectedTargets","setSelectedTargets","sdgImage","staticProjectTypes","SearchBoxProjectTypes","selectedProjectTypes","setselectedProjectTypes","typeImage","Search","DataBlock","location","partners","detail","status","color","picPlaceholder","locationIcon","href","rel","DataBlocksList","filteredDataBlock","viewMode","setViewMode","toggleViewMode","gridImage","listImage","exportToCSV","header","keys","dataRows","entry","values","csvContent","encodedUri","encodeURI","link","document","setAttribute","body","appendChild","click","removeChild","csvImage","Project","Location","Partners","Detail","Status","App","setCountryData","setLevel1Data","setLevel2Data","setProtocoleData","filteredData","setFilteredData","filteredCountryData","filteredLevel1Data","filteredLevel2Data","handleYearChange","year","handleMonthChange","async","responseCountry","axios","get","responseLevel1","responseLevel2","responseProtocole","error","fetchData","partnersArray","split","partner","trim","locationsArray","selectedLocation","statusArray","topicsArray","Topic","topic","selectedTopic","targetsArray","Target","selectedTarget","projectTypesArray","ProjectType","projectType","projectsPerCountry","reduce","acc","modifiedLocation","replace","countryFeature","Country","centroid","countryCentroid","handleClearAllFilters","region","ReactDOM","render","StrictMode","getElementById"],"mappings":"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eAAgB,CACd,cACA,CAAC,cAAe,GAChB,CAAC,MAAO,iBACR,EACA,qBACA,GACA,qBACA,GACA,qBACA,GACA,qBACA,GACA,qBACA,GACA,qBACA,IACA,sBAEF,sBAAuB,CACrB,cACA,CACE,cACA,GAEF,CACE,MACA,iBAEF,EACA,qBACA,GACA,qBACA,GACA,qBACA,GACA,qBACA,GACA,qBACA,GACA,qBACA,IACA,sBAEF,sBAAuB,IACvB,gBAAiB,CACf,cACA,CAAC,UACD,CAAC,QACD,EACA,CACE,IACA,CACE,cACA,CAAC,cAAe,GAChB,CACE,MACA,iBAEF,EACA,EACA,GACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IAEF,KAEF,EACA,CACE,IACA,CACE,cACA,CAAC,cAAe,GAChB,CACE,MACA,iBAEF,EACA,EACA,GACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IAEF,oBAEF,GACA,CACE,IACA,CACE,cACA,CAAC,cAAe,GAChB,CACE,MACA,iBAEF,EACA,EACA,GACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IAEF,MAEF,GACA,CACE,IACA,CACE,cACA,CAAC,cAAe,GAChB,CACE,MACA,iBAEF,EACA,EACA,GACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IAEF,SAKR5F,EAAIkF,QAAQM,SAAS,CACnBC,GAAI,yBACJZ,KAAM,SACNgB,OAAQ,kBACRC,OAAQ,CACN,aAAc,CAAC,YAAa,CAAC,MAAO,kBACpC,YAAa,CAAC,iBAAkB,yBAChC,YAAa,SAKpB,CAAC9D,IAEJ,MAAMoE,EAAaA,KACjBjC,EAAOnE,EAAIkF,QAAQmB,YAAYnC,IAAIhD,QAAQ,IAC3CmD,EAAOrE,EAAIkF,QAAQmB,YAAYjC,IAAIlD,QAAQ,IAC3CqD,EAAQvE,EAAIkF,QAAQoB,UAAUpF,QAAQ,KAGlCqF,EAA2BC,IAE/B,MAAMpE,EAAUoE,EAAExE,SAAS,GACrByE,EAASD,EAAEC,O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","file":"static/js/main.eb6745ae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/location.994e37d5.svg\";","import React from 'react';\r\nimport './Legend.css';\r\n\r\nfunction Legend() {\r\n    const layers = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5', 'No data'];\r\n    const colors = ['#53ca57', '#ffe252', '#fa890f', '#eb3333', '#900101e3', '#ffffff'];\r\n\r\n    return (\r\n        <nav className='legend'>\r\n            <div className='legend-container'>\r\n                {layers.map((layer, i) => (\r\n                    <div key={i} className='legend-item'>\r\n                        <span className='legend-key' style={{ backgroundColor: colors[i] }} />\r\n                        <span className='legend-value'>{layer}</span>\r\n                    </div>\r\n                ))}\r\n    \r\n            \r\n                <div className='legend-item'>\r\n                    <img\r\n                        className='legend-image' \r\n                        src={process.env.PUBLIC_URL + '/images/stripes2.jpg'}\r\n                        alt='stripes'\r\n                        width=\"20\" \r\n                        height=\"20\" \r\n                    />\r\n                    <span className='legend-value'>Inaccessible Protocole</span>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n    \r\n}\r\n\r\nexport default Legend;\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Sidebar.css';\r\nimport App from '../App';\r\n\r\nfunction Sidebar({ countryData, level1Data, level2Data, regionInfo, selectedYear, selectedMonth }) { //REGIONINFO TRAE EL KEY\r\n  const [appendedData, setAppendedData] = useState([]);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    if (countryData && level1Data && level2Data){\r\n        const mergedData = [ ...countryData.features, ...level1Data.features, ...level2Data.features ];\r\n        setAppendedData(mergedData);\r\n    };\r\n    \r\n  }, [regionInfo]);\r\n\r\n\r\n  if (!regionInfo) {\r\n    return null;\r\n  }\r\n\r\n  const clickedKey = regionInfo.key;\r\n\r\n  \r\n  let foundRow = null;\r\n  if (appendedData) {\r\n    foundRow = appendedData.find((feature) => feature.properties.Key === clickedKey);\r\n\r\n  }\r\n\r\n  const properties = foundRow ? foundRow.properties : {};\r\n\r\n  const Name= properties['Name_2'];\r\n  const Population = formatNumber(properties[`POP-${selectedYear}-0${selectedMonth}`]);\r\n  const Phase1 = formatNumber(properties[`PH1-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent1 = calculatePercentage(\r\n    parseFloat(properties[`PH1-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n\r\n  const Phase2 = formatNumber(properties[`PH2-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent2 = calculatePercentage(\r\n    parseFloat(properties[`PH2-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n  const Phase3 = formatNumber(properties[`PH3-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent3 = calculatePercentage(\r\n    parseFloat(properties[`PH3-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n  const Phase4 = formatNumber(properties[`PH4-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent4 = calculatePercentage(\r\n    parseFloat(properties[`PH4-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n  const Phase5 = formatNumber(properties[`PH5-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent5 = calculatePercentage(\r\n    parseFloat(properties[`PH5-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n\r\n  return (\r\n    <nav className='sidebar'>\r\n      <div className='sidebar-container'>\r\n        <div className='logo'>\r\n        <img src={process.env.PUBLIC_URL + '/images/family_icon.jpg'} alt='Family Icon' />\r\n          <span className='logo-text'>Food and nutrition situation {selectedYear} </span> {/* adding selected month as trial*/}\r\n        </div>\r\n\r\n        <div className='region-info'>\r\n          {/* Display information about the hovered region */}\r\n          <h2>\r\n            <div>\r\n              <p>\r\n              {Name}\r\n              </p>\r\n            </div>\r\n          </h2>\r\n\r\n          <div className='info-row'>\r\n            <h4>Total population:</h4>\r\n            <p>{Population}</p>\r\n          </div>\r\n\r\n          <div className='info-row'>\r\n            <h4>Phase 1:</h4>\r\n            <p>{Phase1}</p>\r\n            <p>{Percent1}%</p>\r\n          </div>\r\n          <div className='info-row'>\r\n            <h4>Phase 2:</h4>\r\n            <p>{Phase2}</p>\r\n            <p>{Percent2}%</p>\r\n          </div>\r\n          <div className='info-row'>\r\n            <h4>Phase 3:</h4>\r\n            <p>{Phase3}</p>\r\n            <p>{Percent3}%</p>\r\n          </div>\r\n          <div className='info-row'>\r\n            <h4>Phase 4:</h4>\r\n            <p>{Phase4}</p>\r\n            <p>{Percent4}%</p>\r\n          </div>\r\n          <div className='info-row'>\r\n            <h4>Phase 5:</h4>\r\n            <p>{Phase5}</p>\r\n            <p>{Percent5}%</p>\r\n          </div>\r\n          {/* Add more fields as needed */}\r\n        </div>\r\n        {/* More sidebar content */}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nfunction formatNumber(number) {\r\n  return number ? number.toLocaleString('en-US', { maximumFractionDigits: 0 }) : '';\r\n}\r\n\r\nfunction calculatePercentage(value, total) {\r\n  const percentage = total ? ((value || 0) / total) * 100 : 0;\r\n  return percentage.toFixed(2); // Displaying percentage with two decimal places\r\n}\r\n\r\nexport default Sidebar;\r\n","export const countryCoordinates = [\r\n    { country: \"Benin\", coordinates: [2.4, 10.2] },\r\n    { country: \"BurkinaFaso\", coordinates: [-1.5, 12.2] },\r\n    { country: \"CaboVerde\", coordinates: [-24.0, 16.0] },\r\n    { country: \"Chad\", coordinates: [18.6, 15.3] },\r\n    { country: \"Côted'Ivoire\", coordinates: [-5.4, 7.8] },\r\n    { country: \"Gambia\", coordinates: [-15.9, 13.4] },\r\n    { country: \"Ghana\", coordinates: [-1.2, 6.9] },\r\n    { country: \"Guinea\", coordinates: [-11.05, 10.7] },\r\n    { country: \"Guinea-Bissau\", coordinates: [-15.0, 12.0] },\r\n    { country: \"Liberia\", coordinates: [-9.4, 6.4] },\r\n    { country: \"Mali\", coordinates: [-1.1, 17.3] },\r\n    { country: \"Mauritania\", coordinates: [-10.6, 19.8] },\r\n    { country: \"Niger\", coordinates: [9.4, 17.4] },\r\n    { country: \"Nigeria\", coordinates: [8.2, 9.5] },\r\n    { country: \"Senegal\", coordinates: [-14.7, 15.1] },\r\n    { country: \"SierraLeone\", coordinates: [-11.8, 8.5] },\r\n    { country: \"Togo\", coordinates: [1.05, 8.7] },\r\n    // Add coordinates for other countries here\r\n  ];\r\n  ","import React, { useRef, useEffect, useState } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport Legend from './Legend';\r\nimport App from '../App';\r\nimport './MapView.css';\r\nimport Sidebar from './Sidebar';\r\nimport { countryCoordinates } from './Coordinates'\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoibWFyaWFuYWp2LSIsImEiOiJjbGs3eXJmbzEwYXR3M2RxbnRuOHVkaHV3In0.rVa0wb_O5OTeuk07J90w5A';\r\n\r\nfunction MapView({ selectedYear, selectedMonth, onChangeRegion, countryProjectArray, countryData, protocoleData }) {\r\n  console.log(countryData, 'mapview comp');\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const [lng, setLng] = useState(0);\r\n  const [lat, setLat] = useState(17);\r\n  const [zoom, setZoom] = useState(3.4);\r\n  const [hoveredRegion, setHoveredRegion] = useState(null);\r\n  const features = countryProjectArray.map((project) => {\r\n    const matchingCoordinate = countryCoordinates.find(({ country }) => country === project.country);\r\n  \r\n    return {\r\n      type: 'Feature',\r\n      properties: {\r\n        countryName: project.country,\r\n        countProjects: project.countProjects\r\n      },\r\n      geometry: {\r\n        type: 'Point',\r\n        coordinates: matchingCoordinate.coordinates\r\n      }\r\n    };\r\n  });\r\n  console.log('features', features);\r\n\r\n  const layerNames = ['output_country-2uwmmy', 'output_level1-5iewsu', 'output_level2-8nur76'];\r\n\r\n  const addBoundaryToMap = () => {\r\n    const countryBoundary = {\r\n      id: 'output_country-2uwmmw',\r\n      minzoom: 0,\r\n      maxzoom: 22,\r\n      type: 'line',\r\n      paint: {\r\n        'line-opacity': 1,\r\n        'line-width': 2.5,\r\n        \"line-color\": \"#045226\"  \r\n      },\r\n      source: 'composite',\r\n      'source-layer': 'output_country-2uwmmy',\r\n      layout: {\r\n        'line-cap': 'round',\r\n        'line-join': 'round'\r\n      }\r\n    };\r\n\r\n    // Add the custom layer to the map\r\n    map.current.addLayer(countryBoundary);\r\n  };\r\n\r\n  const initializeMap = () => {\r\n    console.log('Initializing map...');\r\n    map.current = new mapboxgl.Map({\r\n      container: mapContainer.current,\r\n      style: 'mapbox://styles/marianajv-/cllf4b5be012q01pb6nqq4k5x',\r\n      center: [lng, lat],\r\n      zoom: zoom,\r\n      minZoom: 2.6,\r\n      cooperativeGestures: true,\r\n      sources: {\r\n        // ... other sources ...\r\n        'stripes': {\r\n          type: 'image',\r\n          url: '/images/stripes2.jpg', // Path to your local image file\r\n          coordinates: [\r\n            [0, 0],\r\n            [1, 0],\r\n            [1, 1],\r\n            [0, 1]\r\n          ]\r\n        },\r\n      }\r\n    });\r\n    map.current.on('move', handleMove);\r\n\r\n    layerNames.forEach(layerName => {\r\n      map.current.on('click', layerName, createLayerClickHandler);\r\n    });\r\n    map.current.addControl(\r\n      new mapboxgl.NavigationControl()\r\n    );\r\n\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (map.current && features && features.length > 0) {\r\n        const existingSource = map.current.getSource('projectClusters');\r\n        if (existingSource) {\r\n          console.log('Updating existing source data...');\r\n          // Source already exists, update its data\r\n          existingSource.setData({\r\n            type: 'FeatureCollection',\r\n            features: features\r\n          });\r\n          // Update text label field property\r\n          map.current.setLayoutProperty('projectClusters-labels', 'text-field', [\r\n            'to-string',\r\n            ['get', 'countProjects']\r\n          ]);\r\n          console.log('Source data updated:', 'projectClusters');\r\n          \r\n        } else {\r\n          console.log('Adding new source...');\r\n          // Source doesn't exist, add it\r\n          addBoundaryToMap();\r\n          map.current.addSource('projectClusters', {\r\n            type: 'geojson',\r\n            data: {\r\n              type: 'FeatureCollection',\r\n              features: features\r\n            },\r\n            cluster: true,\r\n            clusterMaxZoom: 14,\r\n            clusterRadius: 10\r\n          });\r\n          console.log('Source added:', 'projectClusters');\r\n          map.current.addLayer({\r\n          id: 'projectClusters-circles',\r\n          type: 'circle',\r\n          source: 'projectClusters',\r\n          paint: {\r\n            'circle-color': [\r\n              \"interpolate\",\r\n              [\"exponential\", 1],\r\n              [\"get\", \"countProjects\"],\r\n              0,\r\n              \"hsl(295, 78%, 73%)\",\r\n              10,\r\n              \"hsl(284, 79%, 71%)\",\r\n              20,\r\n              \"hsl(274, 82%, 70%)\",\r\n              40,\r\n              \"hsl(266, 83%, 68%)\",\r\n              60,\r\n              \"hsl(257, 84%, 66%)\",\r\n              80,\r\n              \"hsl(248, 85%, 64%)\",\r\n              100,\r\n              \"hsl(235, 86%, 60%)\"\r\n            ],\r\n            \"circle-stroke-color\": [\r\n              \"interpolate\",\r\n              [\r\n                \"exponential\",\r\n                1\r\n              ],\r\n              [\r\n                \"get\",\r\n                \"countProjects\"\r\n              ],\r\n              0,\r\n              \"hsl(295, 78%, 51%)\",\r\n              10,\r\n              \"hsl(284, 79%, 50%)\",\r\n              20,\r\n              \"hsl(274, 82%, 49%)\",\r\n              40,\r\n              \"hsl(266, 83%, 48%)\",\r\n              60,\r\n              \"hsl(257, 84%, 46%)\",\r\n              80,\r\n              \"hsl(248, 85%, 45%)\",\r\n              100,\r\n              \"hsl(235, 86%, 42%)\"\r\n            ],\r\n            \"circle-stroke-width\": 0.75,\r\n            'circle-radius': [\r\n              \"interpolate\",\r\n              [\"linear\"],\r\n              [\"zoom\"],\r\n              0,\r\n              [\r\n                \"*\",\r\n                [\r\n                  \"interpolate\",\r\n                  [\"exponential\", 1],\r\n                  [\r\n                    \"get\",\r\n                    \"countProjects\"\r\n                  ],\r\n                  0,\r\n                  3,\r\n                  10,\r\n                  6,\r\n                  20,\r\n                  9,\r\n                  40,\r\n                  12,\r\n                  60,\r\n                  15,\r\n                  80,\r\n                  18,\r\n                  100,\r\n                  21\r\n                ],\r\n                2.7\r\n              ],\r\n              5,\r\n              [\r\n                \"*\",\r\n                [\r\n                  \"interpolate\",\r\n                  [\"exponential\", 1],\r\n                  [\r\n                    \"get\",\r\n                    \"countProjects\"\r\n                  ],\r\n                  0,\r\n                  3,\r\n                  10,\r\n                  6,\r\n                  20,\r\n                  9,\r\n                  40,\r\n                  12,\r\n                  60,\r\n                  15,\r\n                  80,\r\n                  18,\r\n                  100,\r\n                  21\r\n                ],\r\n                2.9700000000000006\r\n              ],\r\n              10,\r\n              [\r\n                \"*\",\r\n                [\r\n                  \"interpolate\",\r\n                  [\"exponential\", 1],\r\n                  [\r\n                    \"get\",\r\n                    \"countProjects\"\r\n                  ],\r\n                  0,\r\n                  3,\r\n                  10,\r\n                  6,\r\n                  20,\r\n                  9,\r\n                  40,\r\n                  12,\r\n                  60,\r\n                  15,\r\n                  80,\r\n                  18,\r\n                  100,\r\n                  21\r\n                ],\r\n                3.78\r\n              ],\r\n              22,\r\n              [\r\n                \"*\",\r\n                [\r\n                  \"interpolate\",\r\n                  [\"exponential\", 1],\r\n                  [\r\n                    \"get\",\r\n                    \"countProjects\"\r\n                  ],\r\n                  0,\r\n                  3,\r\n                  10,\r\n                  6,\r\n                  20,\r\n                  9,\r\n                  40,\r\n                  12,\r\n                  60,\r\n                  15,\r\n                  80,\r\n                  18,\r\n                  100,\r\n                  21\r\n                ],\r\n                5.4\r\n              ]\r\n            ]\r\n          }\r\n        });\r\n        map.current.addLayer({\r\n          id: 'projectClusters-labels',\r\n          type: 'symbol',\r\n          source: 'projectClusters',\r\n          layout: {\r\n            'text-field': ['to-string', ['get', 'countProjects']],\r\n            'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\r\n            'text-size': 12,\r\n                  }\r\n        });\r\n      }\r\n    }\r\n  }, [features]);    \r\n\r\n  const handleMove = () => {\r\n    setLng(map.current.getCenter().lng.toFixed(4));\r\n    setLat(map.current.getCenter().lat.toFixed(4));\r\n    setZoom(map.current.getZoom().toFixed(2));\r\n  };\r\n\r\n  const createLayerClickHandler = (e) => {\r\n      \r\n    const feature = e.features[0];\r\n    const lngLat = e.lngLat;\r\n\r\n    const newHoveredRegion = {\r\n      name: feature.properties['Name_2'],\r\n      key: feature.properties['Key']\r\n    };\r\n\r\n    const currentZoom = map.current.getZoom();\r\n    let maxZoom;\r\n    if (currentZoom < 4.99) {\r\n      maxZoom = 4.99;\r\n    } else if (currentZoom > 4.99) {\r\n      maxZoom = 6.7;\r\n    }\r\n    const targetZoom = currentZoom + 0.5 <= maxZoom ? currentZoom + 1 : maxZoom;\r\n    map.current.easeTo({\r\n      center: [lngLat.lng.toFixed(4), lngLat.lat.toFixed(4)],\r\n      zoom: targetZoom,\r\n      duration: 1000,\r\n      curve: 1\r\n    });\r\n\r\n    let popup = null;\r\n\r\n    if (popup) {\r\n      popup.remove();\r\n    }\r\n\r\n    popup = new mapboxgl.Popup({\r\n      maxWidth: '100px',\r\n      maxHeight: '50px',\r\n      className: 'custom-popup'\r\n    })\r\n      .setLngLat(lngLat)\r\n      .setHTML(`<h5>${feature.properties.Name_2}</h5>`)\r\n      .addTo(map.current);\r\n\r\n    onChangeRegion(newHoveredRegion);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n  if (!map.current) {\r\n    initializeMap();\r\n  } else {\r\n\r\n    layerNames.forEach(layerName => {\r\n      const existingLayer = map.current.getLayer(layerName);\r\n      if (existingLayer) {\r\n        map.current.setPaintProperty(\r\n           layerName,\r\n          'fill-color',\r\n          getMapboxExpression(selectedYear, selectedMonth, countryData)\r\n          \r\n        );\r\n      }\r\n    });\r\n\r\n    const separateLayerName = \"output-protocol-7nndf6\";\r\n    const existingSeparateLayer = map.current.getLayer(separateLayerName);\r\n    \r\n    if (existingSeparateLayer) {\r\n      map.current.setPaintProperty(\r\n        separateLayerName,\r\n        'fill-pattern',\r\n        getStripesExpression(selectedYear, selectedMonth, protocoleData)\r\n      );\r\n    }\r\n  \r\n}\r\n\r\n  }, [selectedYear, selectedMonth]);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n\r\n    if (map.current) {\r\n      map.current.on('move', handleMove);\r\n    }\r\n\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [lat, lng, zoom]);\r\n\r\n    return (\r\n      <div className='view-container'>\r\n        \r\n        <div ref={mapContainer} className=\"map-container\" />\r\n\r\n        <Legend/>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n\r\n  function getMapboxExpression(selectedYear, selectedMonth, countryData) {\r\n    const yearValue = parseInt(selectedYear);\r\n    const monthValue = parseInt(selectedMonth);\r\n    const propertyExists = countryData.features.some((feature) => {\r\n      const propertyName = `CLAS-${yearValue}-0${monthValue}`;\r\n      return propertyName in feature.properties;\r\n    });\r\n    \r\n    if (propertyExists) {\r\n      return [\r\n        'case',\r\n        ['==', ['number', ['get', `CLAS-${yearValue}-0${monthValue}`]], 1], '#53ca57',\r\n        ['==', ['number', ['get', `CLAS-${yearValue}-0${monthValue}`]], 2], '#ffe252',\r\n        ['==', ['number', ['get', `CLAS-${yearValue}-0${monthValue}`]], 3], '#fa890f',\r\n        ['==', ['number', ['get', `CLAS-${yearValue}-0${monthValue}`]], 4], '#eb3333',\r\n        '#ffffff'\r\n      ]\r\n    } else {\r\n      return '#ffffff';\r\n\r\n    };\r\n  }\r\n\r\n  function getStripesExpression(selectedYear, selectedMonth, protocoleData) {\r\n    \r\n    const yearValue = parseInt(selectedYear);\r\n    const monthValue = parseInt(selectedMonth);\r\n    const propertyExists = protocoleData.features.some((feature) => {\r\n      const propertyName = `PROT-${yearValue}-0${monthValue}`;\r\n      console.log(propertyName);\r\n      return propertyName in feature.properties;\r\n      \r\n    });\r\n      \r\n    if (propertyExists) {\r\n      return [\r\n        'case',\r\n        ['==', ['number', ['get', `PROT-${yearValue}-0${monthValue}`]], 1],'stripes',\r\n        'transparent' \r\n      ];\r\n    } else {\r\n      return 'transparent'; \r\n    \r\n  }\r\n}\r\n\r\nexport default MapView;","\r\nimport React, { useState } from 'react';\r\nimport './Timebar.css';\r\nimport MapView from './MapView';\r\n\r\n\r\nconst Timebar = ({ onChangeYear, onChangeMonth }) => {\r\n  const minYear = 2014;\r\n  const maxYear = 2023;\r\n  const [selectedYear, setSelectedYear] = useState(maxYear);\r\n  const [selectedMonth, setSelectedMonth] = useState(null);\r\n\r\n  const handleSliderChange = (event) => {\r\n    const yearRange = maxYear - minYear;\r\n    const sliderValue = parseFloat(event.target.value);\r\n    const selected = Math.round(minYear + sliderValue * yearRange);\r\n    setSelectedYear(selected);\r\n    if (onChangeYear) {\r\n      onChangeYear(selected);\r\n    }\r\n  };\r\n\r\n  const handleMonthButtonClick = (month) => {\r\n    const monthMap = {\r\n      March: 3,\r\n      June: 6,\r\n      November: 11,\r\n    };\r\n\r\n    const monthNumber = monthMap[month];\r\n    if (monthNumber !== undefined) {\r\n      setSelectedMonth(monthNumber);\r\n      if (onChangeMonth) {\r\n        onChangeMonth(monthNumber);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    \r\n    \r\n    <div className=\"timebar\">\r\n      <div className=\"year-bar\">\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"1\"\r\n          step=\"0.01\"\r\n          value={(selectedYear - minYear) / (maxYear - minYear)}\r\n          onChange={handleSliderChange}\r\n          className=\"slider\"\r\n        />\r\n        <div className=\"year-indicator\">{selectedYear}</div>\r\n      </div>\r\n      <div className=\"month-buttons\">\r\n        <button\r\n          className={selectedMonth === 3 ? 'selected' : ''}\r\n          onClick={() => handleMonthButtonClick('March')}\r\n        >\r\n          March\r\n        </button>\r\n        <button\r\n          className={selectedMonth === 6 ? 'selected' : ''}\r\n          onClick={() => handleMonthButtonClick('June')}\r\n        >\r\n          June\r\n        </button>\r\n        <button\r\n          className={selectedMonth === 11 ? 'selected' : ''}\r\n          onClick={() => handleMonthButtonClick('November')}\r\n        >\r\n          November\r\n        </button>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timebar;\r\n","import React, { useState } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport App from '../App';\r\nimport Timebar from './Timebar';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport './Table.css';\r\n\r\nconst Table = ({ countryData, level1Data, level2Data, selectedYear, selectedMonth }) => {\r\n  // console.log(selectedMonth);\r\n\r\n  const [columnDefs, setColumnDefs] = useState([\r\n    { field: 'Country', rowgroup: true, hide: false, headerClass: 'custom-header', width: 100 },\r\n    { field: 'Level1', rowgroup: true, hide: false, headerClass: 'custom-header', width: 100 },\r\n    { field: 'Level2', rowgroup: true, hide: false, headerClass: 'custom-header', width: 100 },\r\n    { field: 'Population', headerClass: 'custom-header', width: 120 },\r\n    { field: 'Phase 1', headerClass: 'custom-header1', width: 90 },\r\n    { field: 'Phase 2', headerClass: 'custom-header2', width: 90 },\r\n    { field: 'Phase 3', headerClass: 'custom-header3', width: 90 },\r\n    { field: 'Phase 4', headerClass: 'custom-header4', width: 90 },\r\n    { field: 'Phase 5', headerClass: 'custom-header5', width: 90 },\r\n    { field: 'Phase 3-5', headerClass: 'custom-header5', width: 100 },\r\n    { field: '%', headerClass: 'custom-header5', width: 60 }\r\n  ]);\r\n  const getRowId = (params) => params.data.Key;\r\n  ///\r\n  let tableData = [];\r\n  const [expandedCountry, setExpandedCountry] = useState(null);\r\n  const handleExpandButtonClick = (country) => {\r\n    if (expandedCountry === country) {\r\n      setExpandedCountry(null);\r\n    } else {\r\n      setExpandedCountry(country);\r\n    }\r\n  };\r\n  ///\r\n  if (!countryData || !countryData.features) {\r\n    return null; // Render nothing while data is being fetched\r\n  }\r\n\r\n  const rowData = countryData.features.map((feature) => formatFeature(feature, selectedYear, selectedMonth));\r\n\r\n  const totalRow = {\r\n    Country: 'Total',\r\n    Population: formatNumber(calculateColumnSum('Population', rowData)),\r\n    'Phase 1': formatNumber(calculateColumnSum('Phase 1', rowData)),\r\n    'Phase 2': formatNumber(calculateColumnSum('Phase 2', rowData)),\r\n    'Phase 3': formatNumber(calculateColumnSum('Phase 3', rowData)),\r\n    'Phase 4': formatNumber(calculateColumnSum('Phase 4', rowData)),\r\n    'Phase 5': formatNumber(calculateColumnSum('Phase 5', rowData)),\r\n    'Phase 3-5': formatNumber(calculateColumnSum('Phase 3-5', rowData)),\r\n    '%': calculatePercentage(\r\n      calculateColumnSum('Phase 3-5', rowData),\r\n      calculateColumnSum('Population', rowData)\r\n    ),\r\n\r\n    rowClass: 'total-row',\r\n  };\r\n\r\n\r\n  const allRows = [...rowData, totalRow];\r\n\r\n  ///\r\n  tableData =  tableData.length === 0 ? allRows : tableData;\r\n  function rowClick(clickEvent) { // llamar cuando se pique el boton o el nombre\r\n    const clickedRowData = clickEvent.data;\r\n    const api = clickEvent.api;\r\n    const rowLevel = clickedRowData.level || 0;\r\n    const columnsToCheck = ['Country', 'Level1'];\r\n    \r\n    if (rowLevel === 2) {\r\n      return;\r\n    }\r\n    // expand\r\n    const columnToCheck = columnsToCheck[rowLevel];\r\n    const cellValue = clickedRowData[columnToCheck];\r\n    const data = [level1Data.features, level2Data.features].map((featureSet) => featureSet.map((feature) => formatFeature(feature, selectedYear, selectedMonth)));\r\n    const filteredRows = data[rowLevel]\r\n      .filter((feature) => feature[columnToCheck] === cellValue)\r\n    if(clickedRowData.expanded) {\r\n      // collapse logic ... en cada if voy a tener que hacer un filter y un map \r\n      clickedRowData.expanded = false;\r\n      api.applyTransaction({\r\n        remove: filteredRows.map((row) => ({ Key: row.Key }))\r\n      });\r\n    } else {\r\n      clickedRowData.expanded = true;\r\n      api.applyTransaction({\r\n        add: filteredRows.map((childFeature) => ({ ...childFeature, excludeFromTotals: true, level: rowLevel + 1, expanded: false })), \r\n        addIndex: clickEvent.rowIndex + 1\r\n      });\r\n    }\r\n  }\r\n  ///\r\n\r\n\r\n\r\n\r\n  const groupDisplayType = 'groupRows';\r\n\r\n  return (\r\n    <div className=\"ag-theme-alpine\" >\r\n      <AgGridReact rowData={tableData} groupDisplayType={groupDisplayType} columnDefs={columnDefs} onRowClicked={rowClick} getRowId={getRowId}/>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction formatNumber(number) {\r\n  if (number === null) {\r\n    return '0'; // Return '0' as a string or 0 if you prefer a number\r\n  }\r\n\r\n  return number.toLocaleString('en-US', { maximumFractionDigits: 0 });\r\n}\r\n\r\nfunction calculatePercentage(value, total) {\r\n  const percentage = (value / total) * 100;\r\n  return percentage.toFixed(2); // Displaying percentage with two decimal places\r\n}\r\n\r\nfunction calculateColumnSum(columnName, rowData) {\r\n  return rowData.reduce((total, row) => total + !row.excludeFromTotals ? parseFloat(row[columnName].replace(/,/g, '')) : 0 || 0, 0);\r\n}\r\n\r\nfunction formatFeature(feature, selectedYear, selectedMonth)  {\r\n  const populationData = feature.properties[`POP-${selectedYear}-0${selectedMonth}`];\r\n\r\n  if (populationData === undefined) {\r\n    // Data is not available for this combination, return a message\r\n    return {\r\n      Country: feature.properties['Country'],\r\n      Level1: feature.properties['Name_1'],\r\n      Level2: feature.properties['Name_2'],\r\n      Population: 'Data not available',\r\n      'Phase 1': 'Data not available',\r\n      'Phase 2': 'Data not available',\r\n      'Phase 3': 'Data not available',\r\n      'Phase 4': 'Data not available',\r\n      'Phase 5': 'Data not available',\r\n      'Phase 3-5': 'Data not available',\r\n      '%': 'Data not available',\r\n    };\r\n  }\r\n\r\n  // Data is available, format it\r\n  return {\r\n    Country: getNameByLevel(feature, 0),\r\n    Level1: getNameByLevel(feature, 1),\r\n    Level2: getNameByLevel(feature, 2),\r\n    Population: formatNumber(populationData),\r\n    'Phase 1': formatNumber(feature.properties[`PH1-${selectedYear}-0${selectedMonth}`]),\r\n    'Phase 2': formatNumber(feature.properties[`PH2-${selectedYear}-0${selectedMonth}`]),\r\n    'Phase 3': formatNumber(feature.properties[`PH3-${selectedYear}-0${selectedMonth}`]),\r\n    'Phase 4': formatNumber(feature.properties[`PH4-${selectedYear}-0${selectedMonth}`]),\r\n    'Phase 5': formatNumber(feature.properties[`PH5-${selectedYear}-0${selectedMonth}`]),\r\n    'Phase 3-5': formatNumber(feature.properties[`PH3:5-${selectedYear}-0${selectedMonth}`]),\r\n    '%': calculatePercentage(\r\n      feature.properties[`PH3:5-${selectedYear}-0${selectedMonth}`],\r\n      populationData\r\n    ),\r\n    Key: feature.properties.Key\r\n  };\r\n}\r\n\r\nfunction getNameByLevel(feature, level = 0){\r\n  const propNames = ['Country', 'Name_1', 'Name_2'];\r\n  const propName = propNames[level];\r\n  const name = feature.properties[propName];\r\n  if(level > 0 && name === feature.properties[propNames[level - 1]]) {\r\n    return ''\r\n  } else {\r\n    return name;\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Table;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../styles/StaticFilterOptions.css';\r\nimport Downshift from 'downshift';\r\n\r\nconst StaticFilterOptions = ({ title, options, selectedOptions, setSelectedOptions }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  const handleSelection = (selectedItem) => {\r\n    if (!selectedItem) return;\r\n\r\n    setSelectedOptions((prevSelectedOptions) => {\r\n      if (prevSelectedOptions.includes(selectedItem)) {\r\n        return prevSelectedOptions.filter((option) => option !== selectedItem);\r\n      } else {\r\n        return [...prevSelectedOptions, selectedItem];\r\n      }\r\n    });\r\n    setInputValue('');  // Clear the input value when an item is selected\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const filteredOptions = options.filter(option =>\r\n    !selectedOptions.includes(option) && option.toLowerCase().includes(inputValue.toLowerCase())\r\n  );\r\n\r\n  const handleSelectAll = () => {\r\n    const allOptions = options.filter(option => !selectedOptions.includes(option));\r\n    setSelectedOptions([...selectedOptions, ...allOptions]);\r\n  };\r\n\r\n  const handleClearAll = () => {\r\n    setSelectedOptions([]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"filter-container\">\r\n      <label\r\n        className={`label ${isVisible ? 'highlighted' : ''}`}\r\n        onClick={() => { setIsVisible(!isVisible); }}>\r\n        {title}\r\n      </label>\r\n      {isVisible &&\r\n        <Downshift\r\n          inputValue={inputValue}\r\n          onChange={(selection) => handleSelection(selection)}\r\n          selectedItem={null}\r\n          itemToString={(item) => (item ? item : '')}\r\n          isOpen={isMenuOpen}  // Control menu visibility manually\r\n          onOuterClick={() => setIsMenuOpen(false)}  // Close menu on click outside\r\n        >\r\n          {({\r\n            getInputProps,\r\n            getToggleButtonProps,\r\n            getMenuProps,\r\n            getItemProps,\r\n            isOpen,\r\n            inputValue,\r\n            highlightedIndex,\r\n            toggleMenu,  // Toggle menu visibility\r\n          }) => (\r\n            <div style={{ position: 'relative', display: 'inline-block' }}>\r\n              <input\r\n                {...getInputProps({ placeholder: selectedOptions.length > 0 ? selectedOptions.join(', ') : `Click to search by ${title.props.title.toLowerCase()}`, onChange: handleInputChange })}\r\n                className=\"dropdown-toggle\"\r\n                onClick={() => {\r\n                  toggleMenu();  // Toggle menu on input click\r\n                  setIsMenuOpen(!isMenuOpen);  // Toggle menu visibility\r\n                }}\r\n              />\r\n              {isOpen ? (\r\n                <div className=\"dropdown-menu\" {...getMenuProps()}>\r\n                  <div className=\"select-all-button\" onClick={() => handleSelectAll()}>{`Select all`}</div>\r\n                  <div className=\"clear-all-button\" onClick={() => handleClearAll()}>{`Clear all`}</div>\r\n                  {filteredOptions.map((item, index) => (\r\n                    <div\r\n                      key={item}\r\n                      {...getItemProps({\r\n                        index,\r\n                        item,\r\n                        style: {\r\n                          backgroundColor: highlightedIndex === index ? '#bde4ff' : 'white',\r\n                        },\r\n                      })}\r\n                    >\r\n                      {item}\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          )}\r\n        </Downshift>}\r\n    </div>\r\n  );\r\n};\r\n\r\nStaticFilterOptions.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  selectedOptions: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  setSelectedOptions: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default StaticFilterOptions;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport StaticFilterOptions from \"./StaticFilterOptions\";\r\nimport axios from \"axios\";\r\nimport { feature } from \"@turf/turf\";\r\nimport App from \"../App\";\r\n\r\nconst Mapfilter = ({ handleFilteredDataChange, countryData, level1Data, level2Data }) => {\r\n\r\n  const [filterCountry, setFilterCountry] = useState([]);\r\n  const [level1Filter, setLevel1Filter] = useState([]);\r\n  const [level2Filter, setLevel2Filter] = useState([]);\r\n\r\n  const [countryOptions, setCountryOptions] = useState([]);\r\n  const [level1Options, setLevel1Options] = useState([]);\r\n  const [level2Options, setLevel2Options] = useState([]);\r\n\r\n  const [outputCountryData, setOutputCountryData] = useState([]);\r\n  const [outputLevel1Data, setOutputLevel1Data] = useState([]);\r\n  const [outputLevel2Data, setOutputLevel2Data] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"./data/output_country.geojson\")\r\n      .then((response) => {\r\n        setOutputCountryData(response.data.features);\r\n        const countries = response.data.features.map(\r\n          (feature) => feature.properties.Country\r\n        );\r\n        setCountryOptions(countries); \r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error loading output_country.geojson:\", error);\r\n      });\r\n\r\n    axios\r\n      .get(\"./data/output_level1.geojson\")\r\n      .then((response) => {\r\n        setOutputLevel1Data(response.data.features);\r\n        const level1Names = response.data.features.map(\r\n          (feature) => feature.properties.Name_1\r\n        );\r\n        setLevel1Options(level1Names);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error loading output_level1.geojson:\", error);\r\n      });\r\n\r\n    axios\r\n      .get(\"./data/output_level2.geojson\")\r\n      .then((response) => {\r\n        setOutputLevel2Data(response.data.features);\r\n        const level2Names = response.data.features.map(\r\n          (feature) => feature.properties.Name_2\r\n        );\r\n        setLevel2Options(level2Names);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error loading output_level2.geojson:\", error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update filterCountry and available level1Options when level1Filter changes\r\n    const availableLevel1Options = outputLevel1Data\r\n      .filter((feature) => filterCountry.includes(feature.properties.Country))\r\n      .map((feature) => feature.properties.Name_1);\r\n\r\n    setLevel1Options(availableLevel1Options);\r\n  }, [filterCountry, outputLevel1Data]);\r\n\r\n  useEffect(() => {\r\n    // Update filterCountry, level1Filter, and available level2Options when level2Filter changes\r\n    const availableLevel2Options = outputLevel2Data\r\n      .filter(\r\n        (feature) =>\r\n          filterCountry.includes(feature.properties.Country) &&\r\n          level1Filter.includes(feature.properties.Name_1)\r\n      )\r\n      .map((feature) => feature.properties.Name_2);\r\n\r\n    setLevel2Options(availableLevel2Options);\r\n  }, [filterCountry, level1Filter, outputLevel2Data]);\r\n\r\n  useEffect(() => {\r\n    console.log('Filtering data...');\r\n    const filteredCountryFeatures = [];\r\n    const filteredLevel1Features = [];\r\n    const filteredLevel2Features = [];\r\n  \r\n    if (filterCountry.length > 0 || level1Filter.length > 0 || level2Filter.length > 0) {\r\n      console.log('Applying filters...');\r\n      filteredCountryFeatures.push(\r\n        ...outputCountryData\r\n          .filter((feature) => {\r\n            if (\r\n              level1Filter.length === 0 &&\r\n              level2Filter.length === 0 &&\r\n              filterCountry.length === 0\r\n            ) {\r\n              return true;\r\n            }\r\n            return filterCountry.includes(feature.properties.Country);\r\n          })\r\n          .map((feature) => ({\r\n            type: 'Feature',\r\n            properties: feature.properties,\r\n            geometry: feature.geometry,\r\n          }))\r\n      );\r\n  \r\n      // Level 1 filter should not be affected by Level 2 filter.\r\n      filteredLevel1Features.push(\r\n        ...outputLevel1Data\r\n          .filter((feature) => {\r\n            console.log('Filtering level 1 data...');\r\n            return (\r\n              (level1Filter.length === 0 ||\r\n                level1Filter.includes(feature.properties.Name_1)) &&\r\n              (filterCountry.length === 0 ||\r\n                filterCountry.includes(feature.properties.Country))\r\n            );\r\n          })\r\n          .map((feature) => ({\r\n            type: 'Feature',\r\n            properties: feature.properties,\r\n            geometry: feature.geometry,\r\n          }))\r\n      );\r\n  \r\n      // Level 2 filter.\r\n      filteredLevel2Features.push(\r\n        ...outputLevel2Data\r\n          .filter((feature) => {\r\n            console.log('Filtering level 2 data...');\r\n            return (\r\n              (level1Filter.length === 0 ||\r\n                level1Filter.includes(feature.properties.Name_1)) &&\r\n              (level2Filter.length === 0 ||\r\n                level2Filter.includes(feature.properties.Name_2)) &&\r\n              (filterCountry.length === 0 ||\r\n                filterCountry.includes(feature.properties.Country))\r\n            );\r\n          })\r\n          .map((feature) => ({\r\n            type: 'Feature',\r\n            properties: feature.properties,\r\n            geometry: feature.geometry,\r\n          }))\r\n      );\r\n    } else {\r\n      // Handle the case when no filters are applied.\r\n      filteredCountryFeatures.push(\r\n        ...outputCountryData.map((feature) => ({\r\n          type: 'Feature',\r\n          properties: feature.properties,\r\n          geometry: feature.geometry,\r\n        }))\r\n      );\r\n      filteredLevel1Features.push(\r\n        ...outputLevel1Data.map((feature) => ({\r\n          type: 'Feature',\r\n          properties: feature.properties,\r\n          geometry: feature.geometry,\r\n        }))\r\n      );\r\n      filteredLevel2Features.push(\r\n        ...outputLevel2Data.map((feature) => ({\r\n          type: 'Feature',\r\n          properties: feature.properties,\r\n          geometry: feature.geometry,\r\n        }))\r\n      );\r\n    }\r\n  \r\n    const filteredData = {\r\n      filteredCountryData: {\r\n        type: 'FeatureCollection',\r\n        features: filteredCountryFeatures,\r\n      },\r\n      filteredLevel1Data: {\r\n        type: 'FeatureCollection',\r\n        features: filteredLevel1Features,\r\n      },\r\n      filteredLevel2Data: {\r\n        type: 'FeatureCollection',\r\n        features: filteredLevel2Features,\r\n      },\r\n    };\r\n  \r\n    console.log('Filtered Country data:', filteredData.filteredCountryData); // this has to be sent to App\r\n    console.log('Filtered Lv1 data:', filteredData.filteredLevel1Data);\r\n    console.log('Filtered Lv2 data:', filteredData.filteredLevel2Data);\r\n  \r\n    handleFilteredDataChange(filteredData);\r\n  }, [filterCountry, level1Filter, level2Filter, outputCountryData, outputLevel1Data, outputLevel2Data]);\r\n      \r\n  return (\r\n    <div>\r\n      <h1></h1>\r\n      <div className=\"filter-section\">\r\n        <StaticFilterOptions\r\n          title=\"Country\"\r\n          options={countryOptions}\r\n          selectedOptions={filterCountry}\r\n          setSelectedOptions={setFilterCountry}\r\n        />\r\n      </div>\r\n      <div className=\"filter-section\">\r\n        <StaticFilterOptions\r\n          title=\"Level 1 Name\"\r\n          options={level1Options}\r\n          selectedOptions={level1Filter}\r\n          setSelectedOptions={setLevel1Filter}\r\n        />\r\n      </div>\r\n      <div className=\"filter-section\">\r\n        <StaticFilterOptions\r\n          title=\"Level 2 Name\"\r\n          options={level2Options}\r\n          selectedOptions={level2Filter}\r\n          setSelectedOptions={setLevel2Filter}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mapfilter;","import React, { useState } from 'react';\r\nimport projectImage from \"../assets/project.svg\";\r\n\r\nconst SearchBox = ({ searchQuery, setSearchQuery }) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  return (\r\n    <div className=\"filter-container\">\r\n      <label className=\"label\" onClick={() => { setIsVisible(!isVisible);}}><img src={projectImage} title=\"Project\" /></label>\r\n      {isVisible && \r\n        <div className=\"search-dropdown\">\r\n          <input className=\"dropdown-toggle\"\r\n            type=\"text\"\r\n            placeholder=\"Click to search by name\"\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n          />\r\n        </div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport StaticFilterOptions from \"./StaticFilterOptions\";\r\nimport locationImage from \"../assets/location.svg\";\r\n\r\nconst Countries = [\r\n  \"Benin\",\r\n  \"Burkina Faso\",\r\n  \"Cabo Verde\",\r\n  \"Cameroon\",\r\n  \"Chad\",\r\n  \"Côte d'Ivoire\",\r\n  \"Gambia\",\r\n  \"Ghana\",\r\n  \"Guinea\",\r\n  \"Guinea-Bissau\",\r\n  \"Liberia\",\r\n  \"Mali\",\r\n  \"Mauritania\",\r\n  \"Niger\",\r\n  \"Nigeria\",\r\n  \"Senegal\",\r\n  \"Sierra Leone\",\r\n  \"Togo\"\r\n  // ... other country options\r\n];\r\n\r\nconst SearchBoxLocation = ({ selectedLocations, setSelectedLocations }) => {\r\n  return (\r\n    <StaticFilterOptions\r\n      title={<img src={locationImage} title=\"Location\" />}\r\n      options={Countries}\r\n      selectedOptions={selectedLocations}\r\n      setSelectedOptions={setSelectedLocations}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBoxLocation;\r\n","import React from \"react\";\r\nimport StaticFilterOptions from \"./StaticFilterOptions\";\r\nimport partnerImage from \"../assets/partner.svg\";\r\n\r\nconst staticPartner = [\r\n    \"AfDB\",\r\n    \"Austria - OEZA\",\r\n    \"Belgium - Enable\",\r\n    \"BID\",\r\n    \"Canada - Global Affairs\",\r\n    \"Danemark – DANIDA\",\r\n    \"FCDO\",\r\n    \"Espagne – AECID\",\r\n    \"EU\",\r\n    \"Fonds africain de développement\",\r\n    \"France\",\r\n    \"Germany - BMZ\",\r\n    \"HCR\",\r\n    \"Italy\",\r\n    \"Luxembourg\",\r\n    \"Netherlands (The) - MINBUZA\",\r\n    \"OEZA\",\r\n    \"SNV\",\r\n    \"Switzerland - SDC\",\r\n    \"The World Bank\",\r\n    \"UNICEF\",\r\n    \"USAID-USA\"\r\n    // ... other partner options\r\n\r\n];\r\n\r\nconst SearchBoxPartner = ({ selectedPartner, setSelectedPartner }) => {\r\n  return (\r\n    <StaticFilterOptions\r\n      title={<img src={partnerImage} title=\"Partner\" />}\r\n      options={staticPartner}\r\n      selectedOptions={selectedPartner}\r\n      setSelectedOptions={setSelectedPartner}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBoxPartner;\r\n","import React from \"react\";\r\nimport StaticFilterOptions from \"./StaticFilterOptions\";\r\nimport statusImage from \"../assets/status.svg\";\r\n\r\nconst StatusOptions = [\r\n    \"ONGOING\",\r\n    \"COMPLETED\",\r\n    \"FORTHCOMING\",\r\n];\r\n\r\nconst SearchBoxStatus = ({ selectedStatus, setSelectedStatus }) => {\r\n  return (\r\n    <StaticFilterOptions\r\n      title={<img src={statusImage} title=\"Status\" />}\r\n      options={StatusOptions}\r\n      selectedOptions={selectedStatus}\r\n      setSelectedOptions={setSelectedStatus}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBoxStatus;\r\n","import React from \"react\";\r\nimport StaticFilterOptions from \"./StaticFilterOptions\";\r\nimport topicImage from \"../assets/topic.svg\";\r\n\r\nconst TopicOptions = [\r\n  \"Agriculture\",\r\n  \"Livestock & pastoralism\",\r\n  \"Forestry & biodiversity\",\r\n  \"Fisheries & aquaculture\",\r\n  \"Natural resource management and Climate adaptation and mitigation\",\r\n  \"Employment & revenues\",\r\n  \"Food security and social protection\",\r\n  \"Nutrition and health\",\r\n  \"Demography and migration\",\r\n  \"Energy\",\r\n  \"Water & sanitation\",\r\n  \"Markets, prices & trade\",\r\n  \"Gender (Youth and women)\",\r\n  \"Governance\",\r\n  \"Resilience\",\r\n  \"Youth\",\r\n  \"Protection, paix\",\r\n  // ... other Topic options\r\n];\r\n\r\nconst SearchBoxTopic = ({ selectedTopics, setSelectedTopics }) => {\r\n  return (\r\n    <StaticFilterOptions\r\n      title={<img src={topicImage} title=\"Topic\" />}\r\n      options={TopicOptions}\r\n      selectedOptions={selectedTopics}\r\n      setSelectedOptions={setSelectedTopics}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBoxTopic;\r\n","import React from \"react\";\r\nimport StaticFilterOptions from \"./StaticFilterOptions\";\r\nimport sdgImage from \"../assets/SDG.png\";\r\n\r\nconst TargetOptions = [\r\n  \"SDG 1\",\r\n  \"SDG 2\",\r\n  \"SDG 3\",\r\n  \"SDG 4\",\r\n  \"SDG 5\",\r\n  \"SDG 6\",\r\n  \"SDG 7\",\r\n  \"SDG 8\",\r\n  \"SDG 9\",\r\n  \"SDG 10\",\r\n  \"SDG 11\",\r\n  \"SDG 12\",\r\n  \"SDG 13\",\r\n  \"SDG 14\",\r\n  \"SDG 15\",\r\n  \"SDG 16\",\r\n  \"SDG 17\",\r\n];\r\n\r\nconst SearchBoxTarget = ({ selectedTargets, setSelectedTargets }) => {\r\n  return (\r\n    <StaticFilterOptions\r\n      title={<img src={sdgImage} title=\"Goal\" />}\r\n      options={TargetOptions}\r\n      selectedOptions={selectedTargets}\r\n      setSelectedOptions={setSelectedTargets}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBoxTarget;\r\n","import React from \"react\";\r\nimport StaticFilterOptions from \"./StaticFilterOptions\";\r\nimport typeImage from \"../assets/type.svg\";\r\n\r\nconst staticProjectTypes = [\r\n    \"Humanitarian Aid\",\r\n    \"Development\",\r\n    \"Peace\",\r\n];\r\n\r\nconst SearchBoxProjectTypes = ({ selectedProjectTypes, setselectedProjectTypes }) => {\r\n  return (\r\n    <StaticFilterOptions\r\n      title={<img src={typeImage} title=\"Type\" />}\r\n      options={staticProjectTypes}\r\n      selectedOptions={selectedProjectTypes}\r\n      setSelectedOptions={setselectedProjectTypes}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBoxProjectTypes;\r\n","import React from \"react\";\r\nimport Mapfilter from \"./Mapfilter\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport SearchBoxLocation from \"./SearchBoxLocation\";\r\nimport SearchBoxPartner from \"./SearchBoxPartner\";\r\nimport SearchBoxStatus from \"./SearchBoxStatus\";\r\nimport SearchBoxTopic from \"./SearchBoxTopic\";\r\nimport SearchBoxTarget from \"./SearchBoxTarget\";\r\nimport SearchBoxProjectTypes from \"./SearchBoxProjectType\";\r\nimport \"../styles/Search.css\";\r\n\r\nconst Search = ({\r\n  searchQuery,\r\n  setSearchQuery,\r\n  selectedPartner,\r\n  setSelectedPartner,\r\n  selectedLocations,\r\n  setSelectedLocations,\r\n  selectedStatus,\r\n  setSelectedStatus,\r\n  selectedTopics,\r\n  setSelectedTopics,\r\n  selectedTargets,\r\n  setSelectedTargets,\r\n  selectedProjectTypes,\r\n  setselectedProjectTypes\r\n}) => {\r\n  return (\r\n    <div className=\"search-container\">\r\n      <SearchBox\r\n        searchQuery={searchQuery}\r\n        setSearchQuery={setSearchQuery}\r\n      />\r\n      <SearchBoxLocation\r\n        selectedLocations={selectedLocations}\r\n        setSelectedLocations={setSelectedLocations}\r\n      />\r\n      <SearchBoxPartner\r\n        selectedPartner={selectedPartner}\r\n        setSelectedPartner={setSelectedPartner}\r\n      />\r\n      <SearchBoxStatus\r\n        selectedStatus={selectedStatus}\r\n        setSelectedStatus={setSelectedStatus}\r\n      />\r\n      <SearchBoxTopic\r\n        selectedTopics={selectedTopics}\r\n        setSelectedTopics={setSelectedTopics}\r\n      />\r\n      <SearchBoxTarget\r\n        selectedTargets={selectedTargets}\r\n        setSelectedTargets={setSelectedTargets}\r\n      />\r\n      <SearchBoxProjectTypes\r\n        selectedProjectTypes={selectedProjectTypes}\r\n        setselectedProjectTypes={setselectedProjectTypes}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport locationIcon from \"../assets/location.svg\"\r\nimport picPlaceholder from \"../assets/picture-placeholder.png\"\r\nimport \"../styles/DataBlock.css\"\r\n\r\nconst DataBlock = ({ project, location, partners, detail, status }) => {\r\n    return (\r\n      <div className=\"data-block\">\r\n        <div className=\"picture-wrapper\">\r\n          <div className=\"status-indicator\" style={{ color: \"white\", backgroundColor: status === \"COMPLETED\" ? \"green\" : \"orange\" }}>\r\n            {status}\r\n          </div>\r\n          <img src={picPlaceholder} alt=\"placeHolder\"/>\r\n        </div>\r\n        <div className=\"content\">\r\n          <h2 className=\"project-name\">{project}</h2>\r\n          <div className=\"location\">\r\n            <img src={locationIcon} alt=\"Location\" />\r\n            <span>{location}</span>\r\n          </div>\r\n          <p className=\"partners\">Partners: {partners}</p>\r\n          <a className=\"details-link\" href={detail} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <div className=\"more-button\">More</div>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default DataBlock;\r\n","import React, { useState } from \"react\";\r\nimport DataBlock from \"./DataBlock\";\r\nimport \"../styles/DataBlocksList.css\";\r\nimport \"../styles/CustomSwitch.css\"; // Make sure to import the custom switch styles\r\nimport gridImage from \"../assets/grid.svg\";\r\nimport listImage from \"../assets/list.svg\";\r\nimport csvImage from \"../assets/csv.svg\";\r\n\r\nconst DataBlocksList = ({ filteredDataBlock }) => {\r\n  const [viewMode, setViewMode] = useState(\"grid\"); // Add view mode state\r\n\r\n  const toggleViewMode = () => {\r\n    setViewMode(viewMode === \"grid\" ? \"list\" : \"grid\");\r\n  };\r\n\r\n  const exportToCSV = () => {\r\n    const header = Object.keys(filteredDataBlock[0]).join(\",\"); // Get the keys of the first entry as headers\r\n    const dataRows = filteredDataBlock.map(entry => Object.values(entry).join(\",\")); // Convert each entry to a CSV row\r\n  \r\n    const csvContent = `data:text/csv;charset=utf-8,${header}\\n${dataRows.join(\"\\n\")}`;\r\n  \r\n    const encodedUri = encodeURI(csvContent);\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", encodedUri);\r\n    link.setAttribute(\"download\", \"data.csv\");\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n        \r\n  return (\r\n    <div className=\"data-blocks-list\">\r\n      <div className=\"view-mode-switch\">\r\n      <button className={`export-button ${viewMode === 'list' ? 'list-view' : 'grid-view'}`} onClick={toggleViewMode}>\r\n          {viewMode === 'list' ? <img src={gridImage} title=\"To Grid\" /> : <img src={listImage} title=\"To List\" />}\r\n        </button>\r\n      </div>\r\n      <button className=\"export-button\" onClick={exportToCSV}><img src={csvImage} title=\"Export to CSV\" /></button>\r\n      <div className={viewMode === \"grid\" ? \"data-blocks-grid\" : \"data-blocks-list\"}>\r\n        {filteredDataBlock.map((entry, index) => (\r\n          <DataBlock\r\n            key={index}\r\n            project={entry.Project}\r\n            location={entry.Location}\r\n            partners={entry.Partners}\r\n            detail={entry.Detail}\r\n            status={entry.Status}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataBlocksList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport MapView from './components/MapView';\r\nimport Timebar from './components/Timebar';\r\nimport Sidebar from './components/Sidebar';\r\nimport Table from './components/Table';\r\nimport Mapfilter from './components/Mapfilter';\r\nimport Search from \"./components/Search\";\r\nimport DataBlocksList from \"./components/DataBlocksList\";\r\nimport data from \"./data/data.json\";\r\n\r\n\r\nexport default function App() {\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n    const [selectedStatus, setSelectedStatus] = useState([]);\r\n    const [selectedLocations, setSelectedLocations] = useState([]);\r\n    const [selectedPartner, setSelectedPartner] = useState([]);\r\n    const [selectedProjectTypes, setselectedProjectTypes] = useState([]);\r\n    const [selectedTargets, setSelectedTargets] = useState([]);\r\n    const [selectedTopics, setSelectedTopics] = useState([]);\r\n\r\n    const [countryData, setCountryData] = useState(null);\r\n    const [level1Data, setLevel1Data] = useState(null);\r\n    const [level2Data, setLevel2Data] = useState(null);//for diff layers\r\n    const [protocoleData, setProtocoleData]= useState(null);\r\n    const [selectedYear, setSelectedYear] = useState(2023);\r\n    const [selectedMonth, setSelectedMonth] = useState(3);\r\n    const [hoveredRegion, setHoveredRegion] = useState(null);\r\n    const [filteredData, setFilteredData] = useState({\r\n      filteredCountryData: [],\r\n      filteredLevel1Data: [],\r\n      filteredLevel2Data: [],\r\n    });\r\n    const handleFilteredDataChange = (filteredData) => {\r\n      setFilteredData(filteredData);\r\n    };\r\n\r\n    const handleYearChange = (year) => {\r\n      setSelectedYear(year);\r\n    };\r\n    const handleMonthChange = (month) => {\r\n      setSelectedMonth(month);\r\n    };\r\n    \r\n    const handleRegionChange= (region) => { \r\n      setHoveredRegion(region);\r\n      \r\n    };\r\n\r\n    const handleClearAllFilters = () => {\r\n      setSearchQuery(\"\");\r\n      setSelectedStatus([]);\r\n      setSelectedLocations([]);\r\n      setSelectedPartner([]);\r\n      setselectedProjectTypes([]);\r\n      setSelectedTargets([]);\r\n      setSelectedTopics([]);\r\n    };\r\n\r\n    useEffect(() => { \r\n        async function fetchData() {\r\n          try {\r\n            const responseCountry = await axios.get('./data/output_country.geojson');\r\n            setCountryData(responseCountry.data);\r\n    \r\n            const responseLevel1 = await axios.get('./data/output_level1.geojson');\r\n            setLevel1Data(responseLevel1.data);\r\n    \r\n            const responseLevel2 = await axios.get('./data/output_level2.geojson');\r\n            setLevel2Data(responseLevel2.data);\r\n\r\n            const responseProtocole = await axios.get('./data/output_protocol.geojson');\r\n            setProtocoleData(responseProtocole.data);\r\n              \r\n\r\n          } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n          }\r\n        }\r\n    \r\n        fetchData();\r\n      }, []);\r\n\r\n    const filteredDataBlock = data\r\n      .filter((entry) => {\r\n        if (selectedPartner.length === 0) {\r\n          return true;\r\n        }\r\n        const partnersArray = (entry.Partners || \"\").split(\";\").map(partner => partner.trim());\r\n        return selectedPartner.some((selectedPartner) => partnersArray.includes(selectedPartner));\r\n      })\r\n      .filter((entry) => {\r\n        if (selectedLocations.length === 0) {\r\n          return true;\r\n        }\r\n        const locationsArray = (entry.Location || \"\").split(\";\").map(location => location.trim());\r\n        return selectedLocations.some((selectedLocation) => locationsArray.includes(selectedLocation))\r\n      })\r\n      .filter((entry) => {\r\n        if (selectedStatus.length === 0) {\r\n          return true;\r\n        }\r\n        const statusArray = (entry.Status || \"\").split(\";\").map(status => status.trim());\r\n        return selectedStatus.some((selectedStatus) => statusArray.includes(selectedStatus))\r\n      })\r\n      .filter((entry) => {\r\n        if (selectedTopics.length === 0) {\r\n          return true;\r\n        }\r\n        const topicsArray = (entry.Topic || \"\").split(\";\").map(topic => topic.trim());\r\n        return selectedTopics.some((selectedTopic) => topicsArray.includes(selectedTopic))\r\n      })\r\n      .filter((entry) => {\r\n        if (selectedTargets.length === 0) {\r\n          return true;\r\n        }\r\n        const targetsArray = (entry.Target || \"\").split(\";\").map(target => target.trim());\r\n        return selectedTargets.some((selectedTarget) => targetsArray.includes(selectedTarget))\r\n      })\r\n      .filter((entry) => {\r\n        if (selectedProjectTypes.length === 0) {\r\n          return true;\r\n        }\r\n        const projectTypesArray = (entry.ProjectType || \"\").split(\";\").map(projectType => projectType.trim());\r\n        return selectedProjectTypes.some((selectedProjectTypes) => projectTypesArray.includes(selectedProjectTypes));\r\n      })\r\n      .filter((entry) => {\r\n        if (!searchQuery) {\r\n          return true;\r\n        }\r\n        return entry.Project.toLowerCase().includes(searchQuery.toLowerCase());\r\n      });\r\n\r\n      // Calculating projects per country\r\n      let countryProjectArray = [];\r\n\r\n      // Move the logic for creating countryProjectArray here\r\n      const projectsPerCountry = filteredDataBlock.reduce((acc, entry) => {\r\n        const locations = entry.Location.split(';').map(location => location.trim());\r\n\r\n        locations.forEach(location => {\r\n          // Remove spaces from the location and convert it to lowercase\r\n          const modifiedLocation = location.replace(/\\s+/g, '');\r\n\r\n          if (!countryData) {\r\n            return; // Handle the case when countryData is null or undefined\r\n          }\r\n\r\n          // Loop through countryData to find a matching Country\r\n          countryData.features.forEach(countryFeature => {\r\n            const countryProperties = countryFeature.properties;\r\n            const countryName = countryProperties.Country;\r\n\r\n            if (modifiedLocation === countryName) {\r\n              if (!acc[modifiedLocation]) {\r\n                acc[modifiedLocation] = {\r\n                  country: modifiedLocation,\r\n                  countProjects: 0,\r\n                  centroid: null,\r\n                };\r\n              }\r\n              acc[modifiedLocation].countProjects++;\r\n\r\n              // Calculate the centroid\r\n              const countryGeometry = countryFeature.geometry;\r\n              const countryCentroid = [];\r\n\r\n              // Add centroid to the countryProjectArray\r\n              acc[modifiedLocation].centroid = countryCentroid;\r\n            }\r\n          });\r\n        });\r\n\r\n        return acc;\r\n      }, {});\r\n\r\n      // Convert the object into an array of objects with named properties\r\n      countryProjectArray = Object.values(projectsPerCountry).map(({ country, countProjects, centroid }) => ({\r\n        country: country.replace(/\\s+/g, ' '),\r\n        countProjects,\r\n        centroid,\r\n      }));\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <Search\r\n          searchQuery={searchQuery}\r\n          setSearchQuery={setSearchQuery}\r\n          selectedPartner={selectedPartner}\r\n          setSelectedPartner={setSelectedPartner}\r\n          selectedLocations={selectedLocations}\r\n          setSelectedLocations={setSelectedLocations}\r\n          selectedStatus={selectedStatus}\r\n          setSelectedStatus={setSelectedStatus}\r\n          selectedTopics={selectedTopics}\r\n          setSelectedTopics={setSelectedTopics}\r\n          selectedTargets={selectedTargets}\r\n          setSelectedTargets={setSelectedTargets}\r\n          selectedProjectTypes={selectedProjectTypes}\r\n          setselectedProjectTypes={setselectedProjectTypes}\r\n        />\r\n        <button className=\"export-button\" onClick={handleClearAllFilters}>Clear All Filter</button>\r\n      </div>\r\n      <div className='container'>\r\n        <MapView\r\n          protocoleData={protocoleData}\r\n          countryData={countryData}\r\n          regionInfo={hoveredRegion}\r\n          onChangeYear={handleYearChange}\r\n          onChangeRegion={handleRegionChange}\r\n          selectedYear={selectedYear}\r\n          onChangeMonth={handleMonthChange}\r\n          selectedMonth={selectedMonth}\r\n          countryProjectArray={countryProjectArray}/>      \r\n        <Timebar\r\n          onChangeYear={handleYearChange}\r\n          selectedYear={selectedYear}\r\n          onChangeMonth={handleMonthChange}\r\n          selectedMonth={selectedMonth} />\r\n        <Sidebar\r\n          countryData={countryData}\r\n          level1Data={level1Data}\r\n          level2Data={level2Data}\r\n          regionInfo={hoveredRegion}\r\n          onChangeYear={handleYearChange}\r\n          selectedYear={selectedYear}\r\n          onChangeMonth={handleMonthChange}\r\n          selectedMonth={selectedMonth} /> \r\n      </div>\r\n      <div className='container'>\r\n        <DataBlocksList\r\n          filteredDataBlock={filteredDataBlock}/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/project.a0bc7288.svg\";","module.exports = __webpack_public_path__ + \"static/media/partner.46ff379d.svg\";","module.exports = __webpack_public_path__ + \"static/media/status.5eb705b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/topic.a3ac3372.svg\";","module.exports = __webpack_public_path__ + \"static/media/SDG.6a4a77f1.png\";","module.exports = __webpack_public_path__ + \"static/media/type.7c81011c.svg\";","module.exports = __webpack_public_path__ + \"static/media/picture-placeholder.ae02891c.png\";","module.exports = __webpack_public_path__ + \"static/media/grid.c28378a6.svg\";","module.exports = __webpack_public_path__ + \"static/media/list.d387560a.svg\";","module.exports = __webpack_public_path__ + \"static/media/csv.4098f27f.svg\";"],"sourceRoot":""}