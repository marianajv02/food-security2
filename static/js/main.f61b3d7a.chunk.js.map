{"version":3,"sources":["components/Legend.js","components/Sidebar.js","components/MapView.js","components/Timebar.js","components/Draft.js","components/StaticFilterOptions.js","components/Mapfilter.js","App.js","index.js"],"names":["Legend","colors","React","createElement","className","map","layer","i","key","style","backgroundColor","formatNumber","number","toLocaleString","maximumFractionDigits","calculatePercentage","value","total","toFixed","Sidebar","_ref","countryData","level1Data","level2Data","regionInfo","selectedYear","selectedMonth","appendedData","setAppendedData","useState","useEffect","mergedData","features","clickedKey","foundRow","find","feature","properties","Key","Name","Population","concat","Phase1","Percent1","parseFloat","Phase2","Percent2","Phase3","Percent3","Phase4","Percent4","Phase5","Percent5","src","process","alt","mapboxgl","accessToken","MapView","onChangeRegion","mapContainer","useRef","lng","setLng","lat","setLat","zoom","setZoom","hoveredRegion","setHoveredRegion","handleMove","current","getCenter","getZoom","layerNames","createLayerClickHandler","e","console","log","lngLat","newHoveredRegion","name","popup","remove","Popup","maxWidth","maxHeight","setLngLat","setHTML","Name_2","addTo","isMounted","forEach","layerName","getLayer","setPaintProperty","yearValue","parseInt","monthValue","getMapboxExpression","Map","container","center","on","ref","Timebar","onChangeYear","onChangeMonth","setSelectedYear","setSelectedMonth","handleMonthButtonClick","month","monthNumber","March","June","November","undefined","type","min","max","step","onChange","event","sliderValue","target","selected","Math","round","maxYear","onClick","calculateColumnSum","columnName","rowData","reduce","row","excludeFromTotals","replace","formatFeature","populationData","Country","Level1","Level2","getNameByLevel","level","arguments","length","propNames","propName","Draft","columnDefs","setColumnDefs","field","rowgroup","hide","headerClass","width","tableData","expandedCountry","setExpandedCountry","totalRow","rowClass","allRows","AgGridReact","groupDisplayType","onRowClicked","clickEvent","clickedRowData","data","api","rowLevel","columnToCheck","cellValue","filteredRows","featureSet","filter","expanded","applyTransaction","add","childFeature","addIndex","rowIndex","getRowId","params","StaticFilterOptions","title","options","selectedOptions","setSelectedOptions","showDropdown","setShowDropdown","searchText","setSearchText","dropdownRef","handleDocumentClick","contains","document","addEventListener","removeEventListener","filteredOptions","option","toLowerCase","includes","placeholder","id","checked","handleSelectAll","htmlFor","selectedOption","handleOptionToggle","Mapfilter","handleFilteredDataChange","filterCountry","setFilterCountry","level1Filter","setLevel1Filter","level2Filter","setLevel2Filter","countryOptions","setCountryOptions","level1Options","setLevel1Options","level2Options","setLevel2Options","outputCountryData","setOutputCountryData","outputLevel1Data","setOutputLevel1Data","outputLevel2Data","setOutputLevel2Data","axios","get","then","response","countries","catch","error","level1Names","Name_1","level2Names","availableLevel1Options","availableLevel2Options","filteredCountryFeatures","filteredLevel1Features","filteredLevel2Features","push","geometry","filteredData","filteredCountryData","filteredLevel1Data","filteredLevel2Data","App","setCountryData","setLevel1Data","setLevel2Data","setFilteredData","handleYearChange","year","handleMonthChange","async","responseCountry","responseLevel1","responseLevel2","fetchData","region","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f61b3d7a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Legend.css';\r\n\r\nfunction Legend() {\r\n    const layers = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5', 'No data'];\r\n    const colors = ['#53ca57', '#ffe252', '#fa890f', '#eb3333', '#900101e3','#ffffff'];\r\n\r\n    return (\r\n        <nav className='legend'>\r\n            <div className='legend-container'>\r\n                {layers.map((layer, i) => (\r\n                    <div key={i} className='legend-item'>\r\n                        <span className='legend-key' style={{ backgroundColor: colors[i] }} />\r\n                        <span className='legend-value'>{layer}</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Legend;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Sidebar.css';\r\nimport App from '../App';\r\n\r\nfunction Sidebar({ countryData, level1Data, level2Data, regionInfo, selectedYear, selectedMonth }) { //REGIONINFO TRAE EL KEY\r\n  const [appendedData, setAppendedData] = useState([]);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    if (countryData && level1Data && level2Data){\r\n        const mergedData = [ ...countryData.features, ...level1Data.features, ...level2Data.features ];\r\n        setAppendedData(mergedData);\r\n    };\r\n    \r\n  }, [regionInfo]);\r\n\r\n\r\n  if (!regionInfo) {\r\n    return null;\r\n  }\r\n\r\n  const clickedKey = regionInfo.key;\r\n\r\n  \r\n  let foundRow = null;\r\n  if (appendedData) {\r\n    foundRow = appendedData.find((feature) => feature.properties.Key === clickedKey);\r\n\r\n  }\r\n\r\n  const properties = foundRow ? foundRow.properties : {};\r\n\r\n  const Name= properties['Name_2'];\r\n  const Population = formatNumber(properties[`POP-${selectedYear}-0${selectedMonth}`]);\r\n  const Phase1 = formatNumber(properties[`PH1-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent1 = calculatePercentage(\r\n    parseFloat(properties[`PH1-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n\r\n  const Phase2 = formatNumber(properties[`PH2-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent2 = calculatePercentage(\r\n    parseFloat(properties[`PH2-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n  const Phase3 = formatNumber(properties[`PH3-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent3 = calculatePercentage(\r\n    parseFloat(properties[`PH3-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n  const Phase4 = formatNumber(properties[`PH4-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent4 = calculatePercentage(\r\n    parseFloat(properties[`PH4-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n  const Phase5 = formatNumber(properties[`PH5-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent5 = calculatePercentage(\r\n    parseFloat(properties[`PH5-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n\r\n  return (\r\n    <nav className='sidebar'>\r\n      <div className='sidebar-container'>\r\n        <div className='logo'>\r\n        <img src={process.env.PUBLIC_URL + '/images/family_icon.jpg'} alt='Family Icon' />\r\n          <span className='logo-text'>Food and nutrition situation {selectedYear} </span> {/* adding selected month as trial*/}\r\n        </div>\r\n\r\n        <div className='region-info'>\r\n          {/* Display information about the hovered region */}\r\n          <h2>\r\n            <div>\r\n              <p>\r\n              {Name}\r\n              </p>\r\n            </div>\r\n          </h2>\r\n\r\n          <div className='info-row'>\r\n            <h4>Total population:</h4>\r\n            <p>{Population}</p>\r\n          </div>\r\n\r\n          <div className='info-row'>\r\n            <h4>Phase 1:</h4>\r\n            <p>{Phase1}</p>\r\n            <p>{Percent1}%</p>\r\n          </div>\r\n          <div className='info-row'>\r\n            <h4>Phase 2:</h4>\r\n            <p>{Phase2}</p>\r\n            <p>{Percent2}%</p>\r\n          </div>\r\n          <div className='info-row'>\r\n            <h4>Phase 3:</h4>\r\n            <p>{Phase3}</p>\r\n            <p>{Percent3}%</p>\r\n          </div>\r\n          <div className='info-row'>\r\n            <h4>Phase 4:</h4>\r\n            <p>{Phase4}</p>\r\n            <p>{Percent4}%</p>\r\n          </div>\r\n          <div className='info-row'>\r\n            <h4>Phase 5:</h4>\r\n            <p>{Phase5}</p>\r\n            <p>{Percent5}%</p>\r\n          </div>\r\n          {/* Add more fields as needed */}\r\n        </div>\r\n        {/* More sidebar content */}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nfunction formatNumber(number) {\r\n  return number ? number.toLocaleString('en-US', { maximumFractionDigits: 0 }) : '';\r\n}\r\n\r\nfunction calculatePercentage(value, total) {\r\n  const percentage = total ? ((value || 0) / total) * 100 : 0;\r\n  return percentage.toFixed(2); // Displaying percentage with two decimal places\r\n}\r\n\r\nexport default Sidebar;\r\n","\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport Legend from './Legend';\r\nimport App from '../App';\r\nimport './MapView.css';\r\nimport Sidebar from './Sidebar';\r\nimport { selected } from '@syncfusion/ej2-react-pivotview';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoibWFyaWFuYWp2LSIsImEiOiJjbGs3eXJmbzEwYXR3M2RxbnRuOHVkaHV3In0.rVa0wb_O5OTeuk07J90w5A';\r\n\r\nfunction MapView({selectedYear, selectedMonth, onChangeRegion}) {\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const [lng, setLng] = useState(0);\r\n  const [lat, setLat] = useState(17);\r\n  const [zoom, setZoom] = useState(3.4);\r\n  const [hoveredRegion, setHoveredRegion] = useState(null);\r\n\r\n  const initializeMap = () => {\r\n    map.current = new mapboxgl.Map({\r\n      container: mapContainer.current,\r\n      style: 'mapbox://styles/marianajv-/cllf4b5be012q01pb6nqq4k5x',\r\n      center: [lng, lat],\r\n      zoom: zoom\r\n    });\r\n    map.current.on('move', handleMove);\r\n    layerNames.forEach(layerName => {\r\n      map.current.on('click', layerName, createLayerClickHandler);\r\n    }); \r\n\r\n\r\n  };\r\n\r\n  const handleMove = () => {\r\n    setLng(map.current.getCenter().lng.toFixed(4));\r\n    setLat(map.current.getCenter().lat.toFixed(4));\r\n    setZoom(map.current.getZoom().toFixed(2));\r\n  };\r\n\r\n  const layerNames = ['output_country-2uwmmy', 'output_level1-5iewsu', 'output_level2-8nur76'];\r\n\r\n  const createLayerClickHandler = (e) => {// CLICKHANDLER si lo dejamos en key ya no tiene que depender de year, solo de la posicion \r\n    console.log('clickhandler ran', e.features)\r\n      \r\n    const feature = e.features[0];\r\n    const lngLat = e.lngLat;\r\n\r\n    const newHoveredRegion = {\r\n      name: feature.properties['Name_2'],\r\n      key: feature.properties['Key'] \r\n    };\r\n\r\n    let popup = null;\r\n\r\n    if (popup) {\r\n      popup.remove();\r\n    }\r\n\r\n    popup = new mapboxgl.Popup({\r\n      maxWidth: '100px',\r\n      maxHeight: '50px',\r\n      className: 'custom-popup'\r\n    })\r\n    .setLngLat(lngLat)\r\n    .setHTML(`<h5>${feature.properties.Name_2}</h5>`)\r\n  .addTo(map.current);\r\n\r\n    onChangeRegion(newHoveredRegion);\r\n  };//CLICKHANDLER\r\n  \r\n// separating useffects\r\n\r\nuseEffect(() => {\r\n  let isMounted = true;\r\n\r\n  if (!map.current) {\r\n    initializeMap();\r\n  } else {\r\n\r\n    layerNames.forEach(layerName => {\r\n      const existingLayer = map.current.getLayer(layerName);\r\n      if (existingLayer) {\r\n        map.current.setPaintProperty(\r\n          layerName,\r\n          'fill-color',\r\n          getMapboxExpression(selectedYear, selectedMonth)\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  return () => {\r\n    isMounted = false;\r\n  };\r\n}, [selectedYear, selectedMonth]);\r\n\r\nuseEffect(() => {\r\n  let isMounted = true;\r\n\r\n  if (map.current) {\r\n    map.current.on('move', handleMove);\r\n    \r\n  }\r\n\r\n  return () => {\r\n    isMounted = false;\r\n  };\r\n}, [lat, lng, zoom]);\r\n\r\n\r\n  \r\n    return (\r\n      <div className='view-container'>\r\n        \r\n        <div ref={mapContainer} className=\"map-container\" />\r\n\r\n        <Legend/>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n\r\n  function getMapboxExpression(selectedYear, selectedMonth) {\r\n    const yearValue = parseInt(selectedYear);\r\n    const monthValue = parseInt(selectedMonth);\r\n    \r\n    return [\r\n      'case',\r\n      ['==', ['number', ['get', `CLAS-${yearValue}-0${monthValue}`]], 1], '#53ca57',\r\n      ['==', ['number', ['get', `CLAS-${yearValue}-0${monthValue}`]], 2], '#ffe252',\r\n      ['==', ['number', ['get', `CLAS-${yearValue}-0${monthValue}`]], 3], '#fa890f',\r\n      ['==', ['number', ['get', `CLAS-${yearValue}-0${monthValue}`]], 4], '#eb3333',\r\n      '#ffffff'\r\n    ];\r\n  }\r\n\r\n\r\nexport default MapView;\r\n","\r\nimport React, { useState } from 'react';\r\nimport './Timebar.css';\r\nimport MapView from './MapView';\r\n\r\n\r\nconst Timebar = ({ onChangeYear, onChangeMonth }) => {\r\n  const minYear = 2014;\r\n  const maxYear = 2023;\r\n  const [selectedYear, setSelectedYear] = useState(maxYear);\r\n  const [selectedMonth, setSelectedMonth] = useState(null);\r\n\r\n  const handleSliderChange = (event) => {\r\n    const yearRange = maxYear - minYear;\r\n    const sliderValue = parseFloat(event.target.value);\r\n    const selected = Math.round(minYear + sliderValue * yearRange);\r\n    setSelectedYear(selected);\r\n    if (onChangeYear) {\r\n      onChangeYear(selected);\r\n    }\r\n  };\r\n\r\n  const handleMonthButtonClick = (month) => {\r\n    const monthMap = {\r\n      March: 3,\r\n      June: 6,\r\n      November: 11,\r\n    };\r\n\r\n    const monthNumber = monthMap[month];\r\n    if (monthNumber !== undefined) {\r\n      setSelectedMonth(monthNumber);\r\n      if (onChangeMonth) {\r\n        onChangeMonth(monthNumber);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    \r\n    \r\n    <div className=\"timebar\">\r\n      <div className=\"year-bar\">\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"1\"\r\n          step=\"0.01\"\r\n          value={(selectedYear - minYear) / (maxYear - minYear)}\r\n          onChange={handleSliderChange}\r\n          className=\"slider\"\r\n        />\r\n        <div className=\"year-indicator\">{selectedYear}</div>\r\n      </div>\r\n      <div className=\"month-buttons\">\r\n        <button\r\n          className={selectedMonth === 3 ? 'selected' : ''}\r\n          onClick={() => handleMonthButtonClick('March')}\r\n        >\r\n          March\r\n        </button>\r\n        <button\r\n          className={selectedMonth === 6 ? 'selected' : ''}\r\n          onClick={() => handleMonthButtonClick('June')}\r\n        >\r\n          June\r\n        </button>\r\n        <button\r\n          className={selectedMonth === 11 ? 'selected' : ''}\r\n          onClick={() => handleMonthButtonClick('November')}\r\n        >\r\n          November\r\n        </button>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timebar;\r\n","import React, { useState } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport App from '../App';\r\nimport Timebar from './Timebar';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport './Draft.css';\r\n\r\nconst Draft = ({ countryData, level1Data, level2Data, selectedYear, selectedMonth }) => {\r\n  // console.log(selectedMonth);\r\n\r\n  const [columnDefs, setColumnDefs] = useState([\r\n    { field: 'Country', rowgroup: true, hide: false, headerClass: 'custom-header', width: 100 },\r\n    { field: 'Level1', rowgroup: true, hide: false, headerClass: 'custom-header', width: 100 },\r\n    { field: 'Level2', rowgroup: true, hide: false, headerClass: 'custom-header', width: 100 },\r\n    { field: 'Population', headerClass: 'custom-header', width: 120 },\r\n    { field: 'Phase 1', headerClass: 'custom-header1', width: 90 },\r\n    { field: 'Phase 2', headerClass: 'custom-header2', width: 90 },\r\n    { field: 'Phase 3', headerClass: 'custom-header3', width: 90 },\r\n    { field: 'Phase 4', headerClass: 'custom-header4', width: 90 },\r\n    { field: 'Phase 5', headerClass: 'custom-header5', width: 90 },\r\n    { field: 'Phase 3-5', headerClass: 'custom-header5', width: 100 },\r\n    { field: '%', headerClass: 'custom-header5', width: 60 }\r\n  ]);\r\n  const getRowId = (params) => params.data.Key;\r\n  ///\r\n  let tableData = [];\r\n  const [expandedCountry, setExpandedCountry] = useState(null);\r\n  const handleExpandButtonClick = (country) => {\r\n    if (expandedCountry === country) {\r\n      setExpandedCountry(null);\r\n    } else {\r\n      setExpandedCountry(country);\r\n    }\r\n  };\r\n  ///\r\n  if (!countryData || !countryData.features) {\r\n    return null; // Render nothing while data is being fetched\r\n  }\r\n\r\n  const rowData = countryData.features.map((feature) => formatFeature(feature, selectedYear, selectedMonth));\r\n\r\n  const totalRow = {\r\n    Country: 'Total',\r\n    Population: formatNumber(calculateColumnSum('Population', rowData)),\r\n    'Phase 1': formatNumber(calculateColumnSum('Phase 1', rowData)),\r\n    'Phase 2': formatNumber(calculateColumnSum('Phase 2', rowData)),\r\n    'Phase 3': formatNumber(calculateColumnSum('Phase 3', rowData)),\r\n    'Phase 4': formatNumber(calculateColumnSum('Phase 4', rowData)),\r\n    'Phase 5': formatNumber(calculateColumnSum('Phase 5', rowData)),\r\n    'Phase 3-5': formatNumber(calculateColumnSum('Phase 3-5', rowData)),\r\n    '%': calculatePercentage(\r\n      calculateColumnSum('Phase 3-5', rowData),\r\n      calculateColumnSum('Population', rowData)\r\n    ),\r\n\r\n    rowClass: 'total-row',\r\n  };\r\n\r\n\r\n  const allRows = [...rowData, totalRow];\r\n\r\n  ///\r\n  tableData =  tableData.length === 0 ? allRows : tableData;\r\n  function rowClick(clickEvent) { // llamar cuando se pique el boton o el nombre\r\n    const clickedRowData = clickEvent.data;\r\n    const api = clickEvent.api;\r\n    const rowLevel = clickedRowData.level || 0;\r\n    const columnsToCheck = ['Country', 'Level1'];\r\n    \r\n    if (rowLevel === 2) {\r\n      return;\r\n    }\r\n    // expand\r\n    const columnToCheck = columnsToCheck[rowLevel];\r\n    const cellValue = clickedRowData[columnToCheck];\r\n    console.log(clickedRowData);\r\n    const data = [level1Data.features, level2Data.features].map((featureSet) => featureSet.map((feature) => formatFeature(feature, selectedYear, selectedMonth)));\r\n    const filteredRows = data[rowLevel]\r\n      .filter((feature) => feature[columnToCheck] === cellValue)\r\n    if(clickedRowData.expanded) {\r\n      // collapse logic ... en cada if voy a tener que hacer un filter y un map \r\n      clickedRowData.expanded = false;\r\n      api.applyTransaction({\r\n        remove: filteredRows.map((row) => ({ Key: row.Key }))\r\n      });\r\n    } else {\r\n      clickedRowData.expanded = true;\r\n      api.applyTransaction({\r\n        add: filteredRows.map((childFeature) => ({ ...childFeature, excludeFromTotals: true, level: rowLevel + 1, expanded: false })), \r\n        addIndex: clickEvent.rowIndex + 1\r\n      });\r\n    }\r\n  }\r\n  ///\r\n\r\n\r\n\r\n\r\n  const groupDisplayType = 'groupRows';\r\n\r\n  return (\r\n    <div className=\"ag-theme-alpine\" >\r\n      <AgGridReact rowData={tableData} groupDisplayType={groupDisplayType} columnDefs={columnDefs} onRowClicked={rowClick} getRowId={getRowId}/>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction formatNumber(number) {\r\n  if (number === null) {\r\n    return '0'; // Return '0' as a string or 0 if you prefer a number\r\n  }\r\n\r\n  return number.toLocaleString('en-US', { maximumFractionDigits: 0 });\r\n}\r\n\r\nfunction calculatePercentage(value, total) {\r\n  const percentage = (value / total) * 100;\r\n  return percentage.toFixed(2); // Displaying percentage with two decimal places\r\n}\r\n\r\nfunction calculateColumnSum(columnName, rowData) {\r\n  return rowData.reduce((total, row) => total + !row.excludeFromTotals ? parseFloat(row[columnName].replace(/,/g, '')) : 0 || 0, 0);\r\n}\r\n\r\nfunction formatFeature(feature, selectedYear, selectedMonth)  {\r\n  const populationData = feature.properties[`POP-${selectedYear}-0${selectedMonth}`];\r\n\r\n  if (populationData === undefined) {\r\n    // Data is not available for this combination, return a message\r\n    return {\r\n      Country: feature.properties['Country'],\r\n      Level1: feature.properties['Name_1'],\r\n      Level2: feature.properties['Name_2'],\r\n      Population: 'Data not available',\r\n      'Phase 1': 'Data not available',\r\n      'Phase 2': 'Data not available',\r\n      'Phase 3': 'Data not available',\r\n      'Phase 4': 'Data not available',\r\n      'Phase 5': 'Data not available',\r\n      'Phase 3-5': 'Data not available',\r\n      '%': 'Data not available',\r\n    };\r\n  }\r\n\r\n  // Data is available, format it\r\n  return {\r\n    Country: getNameByLevel(feature, 0),\r\n    Level1: getNameByLevel(feature, 1),\r\n    Level2: getNameByLevel(feature, 2),\r\n    Population: formatNumber(populationData),\r\n    'Phase 1': formatNumber(feature.properties[`PH1-${selectedYear}-0${selectedMonth}`]),\r\n    'Phase 2': formatNumber(feature.properties[`PH2-${selectedYear}-0${selectedMonth}`]),\r\n    'Phase 3': formatNumber(feature.properties[`PH3-${selectedYear}-0${selectedMonth}`]),\r\n    'Phase 4': formatNumber(feature.properties[`PH4-${selectedYear}-0${selectedMonth}`]),\r\n    'Phase 5': formatNumber(feature.properties[`PH5-${selectedYear}-0${selectedMonth}`]),\r\n    'Phase 3-5': formatNumber(feature.properties[`PH3:5-${selectedYear}-0${selectedMonth}`]),\r\n    '%': calculatePercentage(\r\n      feature.properties[`PH3:5-${selectedYear}-0${selectedMonth}`],\r\n      populationData\r\n    ),\r\n    Key: feature.properties.Key\r\n  };\r\n}\r\n\r\nfunction getNameByLevel(feature, level = 0){\r\n  const propNames = ['Country', 'Name_1', 'Name_2'];\r\n  const propName = propNames[level];\r\n  const name = feature.properties[propName];\r\n  if(level > 0 && name === feature.properties[propNames[level - 1]]) {\r\n    return ''\r\n  } else {\r\n    return name;\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Draft;","import React, { useState, useRef, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./StaticFilterOptions.css\";\r\n\r\nconst StaticFilterOptions = ({ title, options, selectedOptions, setSelectedOptions }) => {\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n\r\n  const dropdownRef = useRef(null);\r\n\r\n  const handleDocumentClick = (event) => {\r\n    if (!dropdownRef.current.contains(event.target)) {\r\n      setShowDropdown(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"click\", handleDocumentClick);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleDocumentClick);\r\n    };\r\n  }, []);\r\n\r\n  const handleSelectAll = () => {\r\n    if (selectedOptions.length === options.length) {\r\n      setSelectedOptions([]);\r\n    } else {\r\n      setSelectedOptions(options);\r\n    }\r\n  };\r\n\r\n  const handleOptionToggle = (option) => {\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (e) => {\r\n    setSearchText(e.target.value);\r\n  };\r\n\r\n  const filteredOptions = options\r\n    .filter(option => option != null)\r\n    .filter((option) => option.toLowerCase().includes(searchText.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"filter-container\">\r\n      <label>{title}:</label>\r\n      <div className=\"search-dropdown\" ref={dropdownRef}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder={`Search by ${title}`}\r\n          value={searchText}\r\n          onChange={handleSearchChange}\r\n          onClick={() => setShowDropdown(true)}\r\n        />\r\n        {showDropdown && (\r\n          <div className=\"checkbox-list\">\r\n            <div>\r\n              <input\r\n                type=\"checkbox\"\r\n                id={`selectAll${title}`}\r\n                value={`selectAll${title}`}\r\n                checked={selectedOptions.length === options.length}\r\n                onChange={handleSelectAll}\r\n              />\r\n              <label htmlFor={`selectAll${title}`}>Select All</label>\r\n            </div>\r\n            {filteredOptions.map((option) => (\r\n              <div key={option}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={option}\r\n                  value={option}\r\n                  checked={selectedOptions.includes(option)}\r\n                  onChange={() => handleOptionToggle(option)}\r\n                />\r\n                <label htmlFor={option}>\r\n                  <span>{option}</span>\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nStaticFilterOptions.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  selectedOptions: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  setSelectedOptions: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default StaticFilterOptions;","import React, { useState, useEffect } from \"react\";\r\nimport StaticFilterOptions from \"./StaticFilterOptions\";\r\nimport axios from \"axios\";\r\nimport \"./Mapfilter.css\";\r\nimport { feature } from \"@turf/turf\";\r\nimport App from \"../App\";\r\n\r\nconst Mapfilter = ({ handleFilteredDataChange, countryData, level1Data, level2Data }) => {\r\n\r\n  const [filterCountry, setFilterCountry] = useState([]);\r\n  const [level1Filter, setLevel1Filter] = useState([]);\r\n  const [level2Filter, setLevel2Filter] = useState([]);\r\n\r\n  const [countryOptions, setCountryOptions] = useState([]);\r\n  const [level1Options, setLevel1Options] = useState([]);\r\n  const [level2Options, setLevel2Options] = useState([]);\r\n\r\n  const [outputCountryData, setOutputCountryData] = useState([]);\r\n  const [outputLevel1Data, setOutputLevel1Data] = useState([]);\r\n  const [outputLevel2Data, setOutputLevel2Data] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"./data/output_country.geojson\")\r\n      .then((response) => {\r\n        setOutputCountryData(response.data.features);\r\n        const countries = response.data.features.map(\r\n          (feature) => feature.properties.Country\r\n        );\r\n        setCountryOptions(countries); \r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error loading output_country.geojson:\", error);\r\n      });\r\n\r\n    axios\r\n      .get(\"./data/output_level1.geojson\")\r\n      .then((response) => {\r\n        setOutputLevel1Data(response.data.features);\r\n        const level1Names = response.data.features.map(\r\n          (feature) => feature.properties.Name_1\r\n        );\r\n        setLevel1Options(level1Names);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error loading output_level1.geojson:\", error);\r\n      });\r\n\r\n    axios\r\n      .get(\"./data/output_level2.geojson\")\r\n      .then((response) => {\r\n        setOutputLevel2Data(response.data.features);\r\n        const level2Names = response.data.features.map(\r\n          (feature) => feature.properties.Name_2\r\n        );\r\n        setLevel2Options(level2Names);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error loading output_level2.geojson:\", error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update filterCountry and available level1Options when level1Filter changes\r\n    const availableLevel1Options = outputLevel1Data\r\n      .filter((feature) => filterCountry.includes(feature.properties.Country))\r\n      .map((feature) => feature.properties.Name_1);\r\n\r\n    setLevel1Options(availableLevel1Options);\r\n  }, [filterCountry, outputLevel1Data]);\r\n\r\n  useEffect(() => {\r\n    // Update filterCountry, level1Filter, and available level2Options when level2Filter changes\r\n    const availableLevel2Options = outputLevel2Data\r\n      .filter(\r\n        (feature) =>\r\n          filterCountry.includes(feature.properties.Country) &&\r\n          level1Filter.includes(feature.properties.Name_1)\r\n      )\r\n      .map((feature) => feature.properties.Name_2);\r\n\r\n    setLevel2Options(availableLevel2Options);\r\n  }, [filterCountry, level1Filter, outputLevel2Data]);\r\n\r\n  useEffect(() => {\r\n    console.log('Filtering data...');\r\n    const filteredCountryFeatures = [];\r\n    const filteredLevel1Features = [];\r\n    const filteredLevel2Features = [];\r\n  \r\n    if (filterCountry.length > 0 || level1Filter.length > 0 || level2Filter.length > 0) {\r\n      console.log('Applying filters...');\r\n      filteredCountryFeatures.push(\r\n        ...outputCountryData\r\n          .filter((feature) => {\r\n            if (\r\n              level1Filter.length === 0 &&\r\n              level2Filter.length === 0 &&\r\n              filterCountry.length === 0\r\n            ) {\r\n              return true;\r\n            }\r\n            return filterCountry.includes(feature.properties.Country);\r\n          })\r\n          .map((feature) => ({\r\n            type: 'Feature',\r\n            properties: feature.properties,\r\n            geometry: feature.geometry,\r\n          }))\r\n      );\r\n  \r\n      // Level 1 filter should not be affected by Level 2 filter.\r\n      filteredLevel1Features.push(\r\n        ...outputLevel1Data\r\n          .filter((feature) => {\r\n            console.log('Filtering level 1 data...');\r\n            return (\r\n              (level1Filter.length === 0 ||\r\n                level1Filter.includes(feature.properties.Name_1)) &&\r\n              (filterCountry.length === 0 ||\r\n                filterCountry.includes(feature.properties.Country))\r\n            );\r\n          })\r\n          .map((feature) => ({\r\n            type: 'Feature',\r\n            properties: feature.properties,\r\n            geometry: feature.geometry,\r\n          }))\r\n      );\r\n  \r\n      // Level 2 filter.\r\n      filteredLevel2Features.push(\r\n        ...outputLevel2Data\r\n          .filter((feature) => {\r\n            console.log('Filtering level 2 data...');\r\n            return (\r\n              (level1Filter.length === 0 ||\r\n                level1Filter.includes(feature.properties.Name_1)) &&\r\n              (level2Filter.length === 0 ||\r\n                level2Filter.includes(feature.properties.Name_2)) &&\r\n              (filterCountry.length === 0 ||\r\n                filterCountry.includes(feature.properties.Country))\r\n            );\r\n          })\r\n          .map((feature) => ({\r\n            type: 'Feature',\r\n            properties: feature.properties,\r\n            geometry: feature.geometry,\r\n          }))\r\n      );\r\n    } else {\r\n      // Handle the case when no filters are applied.\r\n      filteredCountryFeatures.push(\r\n        ...outputCountryData.map((feature) => ({\r\n          type: 'Feature',\r\n          properties: feature.properties,\r\n          geometry: feature.geometry,\r\n        }))\r\n      );\r\n      filteredLevel1Features.push(\r\n        ...outputLevel1Data.map((feature) => ({\r\n          type: 'Feature',\r\n          properties: feature.properties,\r\n          geometry: feature.geometry,\r\n        }))\r\n      );\r\n      filteredLevel2Features.push(\r\n        ...outputLevel2Data.map((feature) => ({\r\n          type: 'Feature',\r\n          properties: feature.properties,\r\n          geometry: feature.geometry,\r\n        }))\r\n      );\r\n    }\r\n  \r\n    const filteredData = {\r\n      filteredCountryData: {\r\n        type: 'FeatureCollection',\r\n        features: filteredCountryFeatures,\r\n      },\r\n      filteredLevel1Data: {\r\n        type: 'FeatureCollection',\r\n        features: filteredLevel1Features,\r\n      },\r\n      filteredLevel2Data: {\r\n        type: 'FeatureCollection',\r\n        features: filteredLevel2Features,\r\n      },\r\n    };\r\n  \r\n    console.log('Filtered Country data:', filteredData.filteredCountryData); // this has to be sent to App\r\n    console.log('Filtered Lv1 data:', filteredData.filteredLevel1Data);\r\n    console.log('Filtered Lv2 data:', filteredData.filteredLevel2Data);\r\n  \r\n    handleFilteredDataChange(filteredData);\r\n  }, [filterCountry, level1Filter, level2Filter, outputCountryData, outputLevel1Data, outputLevel2Data]);\r\n      \r\n  return (\r\n    <div>\r\n      <h1></h1>\r\n      <div className=\"filter-section\">\r\n        <StaticFilterOptions\r\n          title=\"Country\"\r\n          options={countryOptions}\r\n          selectedOptions={filterCountry}\r\n          setSelectedOptions={setFilterCountry}\r\n        />\r\n      </div>\r\n      <div className=\"filter-section\">\r\n        <StaticFilterOptions\r\n          title=\"Level 1 Name\"\r\n          options={level1Options}\r\n          selectedOptions={level1Filter}\r\n          setSelectedOptions={setLevel1Filter}\r\n        />\r\n      </div>\r\n      <div className=\"filter-section\">\r\n        <StaticFilterOptions\r\n          title=\"Level 2 Name\"\r\n          options={level2Options}\r\n          selectedOptions={level2Filter}\r\n          setSelectedOptions={setLevel2Filter}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mapfilter;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport MapView from './components/MapView';\r\nimport Timebar from './components/Timebar';\r\nimport Sidebar from './components/Sidebar';\r\nimport Draft from './components/Draft';\r\nimport Mapfilter from './components/Mapfilter';\r\n\r\nexport default function App() {\r\n    const [countryData, setCountryData] = useState(null);\r\n    const [level1Data, setLevel1Data] = useState(null);\r\n    const [level2Data, setLevel2Data] = useState(null);//for diff layers\r\n    const [selectedYear, setSelectedYear] = useState(2023);\r\n    const [selectedMonth, setSelectedMonth] = useState(3);\r\n    const [hoveredRegion, setHoveredRegion] = useState(null);\r\n    const [filteredData, setFilteredData] = useState({\r\n      filteredCountryData: [],\r\n      filteredLevel1Data: [],\r\n      filteredLevel2Data: [],\r\n    });\r\n    const handleFilteredDataChange = (filteredData) => {\r\n      setFilteredData(filteredData);\r\n    };\r\n\r\n    const handleYearChange = (year) => {\r\n      setSelectedYear(year);\r\n    };\r\n    const handleMonthChange = (month) => {\r\n      setSelectedMonth(month);\r\n    };\r\n    \r\n    const handleRegionChange= (region) => { \r\n      setHoveredRegion(region);\r\n      \r\n    };\r\n    \r\n  \r\n\r\n    useEffect(() => { //la data de draft si cambia porque esta dentro de UseEffect\r\n        async function fetchData() {\r\n          try {\r\n            const responseCountry = await axios.get('./data/output_country.geojson');\r\n            setCountryData(responseCountry.data);\r\n    \r\n            const responseLevel1 = await axios.get('./data/output_level1.geojson');\r\n            setLevel1Data(responseLevel1.data);\r\n    \r\n            const responseLevel2 = await axios.get('./data/output_level2.geojson');\r\n            setLevel2Data(responseLevel2.data);\r\n              console.log(responseLevel1,responseLevel2,'response levels');\r\n\r\n          } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n          }\r\n        }\r\n    \r\n        fetchData();\r\n      }, []);\r\n\r\n    \r\n\r\n  return (\r\n    <div>\r\n      <MapView regionInfo={hoveredRegion} onChangeYear={handleYearChange} onChangeRegion={handleRegionChange} selectedYear={selectedYear} onChangeMonth={handleMonthChange} selectedMonth={selectedMonth}/>\r\n      \r\n      <Timebar onChangeYear={handleYearChange} selectedYear={selectedYear} onChangeMonth={handleMonthChange} selectedMonth={selectedMonth} />\r\n      <Sidebar countryData={countryData} level1Data={level1Data} level2Data={level2Data} regionInfo={hoveredRegion} onChangeYear={handleYearChange} selectedYear={selectedYear} onChangeMonth={handleMonthChange} selectedMonth={selectedMonth} /> \r\n      <Mapfilter handleFilteredDataChange={handleFilteredDataChange}/>\r\n      <Draft countryData={filteredData.filteredCountryData} level1Data={level1Data} level2Data={level2Data} onChangeYear={handleYearChange} selectedYear={selectedYear} onChangeMonth={handleMonthChange} selectedMonth={selectedMonth}/>\r\n      {/* <div><Table countryData={filteredData.filteredCountryData} level1Data={level1Data} level2Data={level2Data} onChangeYear={handleYearChange} selectedYear={selectedYear} onChangeMonth={handleMonthChange} selectedMonth={selectedMonth}/></div> */}\r\n\r\n    \r\n      \r\n\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}