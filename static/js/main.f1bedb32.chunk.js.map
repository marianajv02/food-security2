{"version":3,"sources":["components/Legend.js","components/Sidebar.js","components/MapView.js","components/Timebar.js","components/Table.js","components/Draft.js","components/StaticFilterOptions.js","components/Mapfilter.js","App.js","index.js"],"names":["Legend","colors","React","createElement","className","map","layer","i","key","style","backgroundColor","formatNumber","number","toLocaleString","maximumFractionDigits","calculatePercentage","value","total","toFixed","Sidebar","_ref","countryData","level1Data","level2Data","regionInfo","selectedYear","selectedMonth","appendedData","setAppendedData","useState","useEffect","mergedData","features","clickedKey","foundRow","find","feature","properties","Key","Name","Population","concat","Phase1","Percent1","parseFloat","Phase2","Percent2","Phase3","Percent3","Phase4","Percent4","Phase5","Percent5","src","alt","mapboxgl","accessToken","MapView","onChangeRegion","mapContainer","useRef","lng","setLng","lat","setLat","zoom","setZoom","hoveredRegion","setHoveredRegion","handleMove","current","getCenter","getZoom","layerNames","createLayerClickHandler","e","console","log","lngLat","newHoveredRegion","name","popup","remove","Popup","maxWidth","maxHeight","setLngLat","setHTML","Name_2","addTo","isMounted","forEach","layerName","getLayer","setPaintProperty","yearValue","parseInt","monthValue","getMapboxExpression","Map","container","center","on","ref","Timebar","onChangeYear","onChangeMonth","setSelectedYear","setSelectedMonth","handleMonthButtonClick","month","monthNumber","March","June","November","undefined","type","min","max","step","onChange","event","sliderValue","target","selected","Math","round","maxYear","onClick","Table","calculateColumnSum","columnName","rowData","reduce","row","replace","Draft","columnDefs","setColumnDefs","field","rowgroup","hide","headerClass","width","populationData","Country","L1","L2","totalRow","rowClass","allRows","AgGridReact","groupDisplayType","StaticFilterOptions","title","options","selectedOptions","setSelectedOptions","showDropdown","setShowDropdown","searchText","setSearchText","dropdownRef","handleDocumentClick","contains","document","addEventListener","removeEventListener","filteredOptions","filter","option","toLowerCase","includes","placeholder","id","checked","length","handleSelectAll","htmlFor","selectedOption","handleOptionToggle","Mapfilter","handleFilteredDataChange","filterCountry","setFilterCountry","level1Filter","setLevel1Filter","level2Filter","setLevel2Filter","countryOptions","setCountryOptions","level1Options","setLevel1Options","level2Options","setLevel2Options","outputCountryData","setOutputCountryData","outputLevel1Data","setOutputLevel1Data","outputLevel2Data","setOutputLevel2Data","axios","get","then","response","data","countries","catch","error","level1Names","Name_1","level2Names","availableLevel1Options","availableLevel2Options","filteredCountryFeatures","filteredLevel1Features","filteredLevel2Features","push","geometry","filteredData","filteredCountryData","filteredLevel1Data","filteredLevel2Data","App","setCountryData","setLevel1Data","setLevel2Data","setFilteredData","handleYearChange","year","handleMonthChange","async","responseCountry","responseLevel1","responseLevel2","fetchData","region","ReactDOM","render","StrictMode","getElementById"],"mappings":"0cAqBeA,MAlBf,WACI,MACMC,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,YAAY,WAExE,OACIC,IAAAC,cAAA,OAAKC,UAAU,UACXF,IAAAC,cAAA,OAAKC,UAAU,oBALR,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAMnDC,IAAI,CAACC,EAAOC,IAChBL,IAAAC,cAAA,OAAKK,IAAKD,EAAGH,UAAU,eACnBF,IAAAC,cAAA,QAAMC,UAAU,aAAaK,MAAO,CAAEC,gBAAiBT,EAAOM,MAC9DL,IAAAC,cAAA,QAAMC,UAAU,gBAAgBE,Q,YCwGxD,SAASK,EAAaC,GACpB,OAAOA,EAASA,EAAOC,eAAe,QAAS,CAAEC,sBAAuB,IAAO,GAGjF,SAASC,EAAoBC,EAAOC,GAElC,OADmBA,GAAUD,GAAS,GAAKC,EAAS,IAAM,GACxCC,QAAQ,GAGbC,MA1Hf,SAAgBC,GAAoF,IAAnF,YAAEC,EAAW,WAAEC,EAAU,WAAEC,EAAU,WAAEC,EAAU,aAAEC,EAAY,cAAEC,GAAeN,EAC/F,MAAOO,EAAcC,GAAmBC,mBAAS,IAYjD,GATAC,oBAAU,KACR,GAAIT,GAAeC,GAAcC,EAAW,CACxC,MAAMQ,EAAa,IAAKV,EAAYW,YAAaV,EAAWU,YAAaT,EAAWS,UACpFJ,EAAgBG,KAGnB,CAACP,KAGCA,EACH,OAAO,KAGT,MAAMS,EAAaT,EAAWhB,IAG9B,IAAI0B,EAAW,KACXP,IACFO,EAAWP,EAAaQ,KAAMC,GAAYA,EAAQC,WAAWC,MAAQL,IAIvE,MAAMI,EAAaH,EAAWA,EAASG,WAAa,GAE9CE,EAAMF,EAAmB,OACzBG,EAAa7B,EAAa0B,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KAC7DgB,EAAS/B,EAAa0B,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KACzDiB,EAAW5B,EACf6B,WAAWP,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KAC9CkB,WAAWP,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,MAG1CmB,EAASlC,EAAa0B,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KACzDoB,EAAW/B,EACf6B,WAAWP,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KAC9CkB,WAAWP,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,MAE1CqB,EAASpC,EAAa0B,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KACzDsB,EAAWjC,EACf6B,WAAWP,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KAC9CkB,WAAWP,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,MAE1CuB,EAAStC,EAAa0B,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KACzDwB,EAAWnC,EACf6B,WAAWP,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KAC9CkB,WAAWP,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,MAE1CyB,EAASxC,EAAa0B,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KACzD0B,EAAWrC,EACf6B,WAAWP,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KAC9CkB,WAAWP,EAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,MAGhD,OACExB,IAAAC,cAAA,OAAKC,UAAU,WACbF,IAAAC,cAAA,OAAKC,UAAU,qBACbF,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,OAAKkD,IAAI,0BAA0BC,IAAI,gBACvCpD,IAAAC,cAAA,QAAMC,UAAU,aAAY,gCAA8BqB,EAAa,KAAQ,KAGjFvB,IAAAC,cAAA,OAAKC,UAAU,eAEbF,IAAAC,cAAA,UACED,IAAAC,cAAA,WACED,IAAAC,cAAA,SACCoC,KAKLrC,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAI,qBACJD,IAAAC,cAAA,SAAIqC,IAGNtC,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,SAAIuC,GACJxC,IAAAC,cAAA,SAAIwC,EAAS,MAEfzC,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,SAAI0C,GACJ3C,IAAAC,cAAA,SAAI2C,EAAS,MAEf5C,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,SAAI4C,GACJ7C,IAAAC,cAAA,SAAI6C,EAAS,MAEf9C,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,SAAI8C,GACJ/C,IAAAC,cAAA,SAAI+C,EAAS,MAEfhD,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,UAAI,YACJD,IAAAC,cAAA,SAAIgD,GACJjD,IAAAC,cAAA,SAAIiD,EAAS,UCjGzBG,IAASC,YAAc,gGAiIRC,MA/Hf,SAAgBrC,GAAiD,IAAhD,aAACK,EAAY,cAAEC,EAAa,eAAEgC,GAAetC,EAC5D,MAAMuC,EAAeC,iBAAO,MACtBvD,EAAMuD,iBAAO,OACZC,EAAKC,GAAUjC,mBAAS,IACxBkC,EAAKC,GAAUnC,mBAAS,KACxBoC,EAAMC,GAAWrC,mBAAS,MAC1BsC,EAAeC,GAAoBvC,mBAAS,MAiB7CwC,EAAaA,KACjBP,EAAOzD,EAAIiE,QAAQC,YAAYV,IAAI3C,QAAQ,IAC3C8C,EAAO3D,EAAIiE,QAAQC,YAAYR,IAAI7C,QAAQ,IAC3CgD,EAAQ7D,EAAIiE,QAAQE,UAAUtD,QAAQ,KAGlCuD,EAAa,CAAC,wBAAyB,uBAAwB,wBAE/DC,EAA2BC,IAC/BC,QAAQC,IAAI,mBAAoBF,EAAE3C,UAElC,MAAMI,EAAUuC,EAAE3C,SAAS,GACrB8C,EAASH,EAAEG,OAEXC,EAAmB,CACvBC,KAAM5C,EAAQC,WAAmB,OACjC7B,IAAK4B,EAAQC,WAAgB,KAG/B,IAAI4C,EAAQ,KAERA,GACFA,EAAMC,SAGRD,EAAQ,IAAI1B,IAAS4B,MAAM,CACzBC,SAAU,QACVC,UAAW,OACXjF,UAAW,iBAEZkF,UAAUR,GACVS,QAAQ,OAAD9C,OAAQL,EAAQC,WAAWmD,OAAM,UAC1CC,MAAMpF,EAAIiE,SAETZ,EAAeqB,IA4Cf,OAvCJjD,oBAAU,KACR,IAAI4D,GAAY,EAkBhB,OAhBKrF,EAAIiE,QAIPG,EAAWkB,QAAQC,IACKvF,EAAIiE,QAAQuB,SAASD,IAEzCvF,EAAIiE,QAAQwB,iBACVF,EACA,aAsCR,SAA6BnE,EAAcC,GACzC,MAAMqE,EAAYC,SAASvE,GACrBwE,EAAaD,SAAStE,GAE5B,MAAO,CACL,OACA,CAAC,KAAM,CAAC,SAAU,CAAC,MAAM,QAADe,OAAUsD,EAAS,MAAAtD,OAAKwD,KAAgB,GAAI,UACpE,CAAC,KAAM,CAAC,SAAU,CAAC,MAAM,QAADxD,OAAUsD,EAAS,MAAAtD,OAAKwD,KAAgB,GAAI,UACpE,CAAC,KAAM,CAAC,SAAU,CAAC,MAAM,QAADxD,OAAUsD,EAAS,MAAAtD,OAAKwD,KAAgB,GAAI,UACpE,CAAC,KAAM,CAAC,SAAU,CAAC,MAAM,QAADxD,OAAUsD,EAAS,MAAAtD,OAAKwD,KAAgB,GAAI,UACpE,WA/CIC,CAAoBzE,EAAcC,OAlExCrB,EAAIiE,QAAU,IAAIf,IAAS4C,IAAI,CAC7BC,UAAWzC,EAAaW,QACxB7D,MAAO,uDACP4F,OAAQ,CAACxC,EAAKE,GACdE,KAAMA,IAER5D,EAAIiE,QAAQgC,GAAG,OAAQjC,GACvBI,EAAWkB,QAAQC,IACjBvF,EAAIiE,QAAQgC,GAAG,QAASV,EAAWlB,MAgEhC,KACLgB,GAAY,IAEb,CAACjE,EAAcC,IAElBI,oBAAU,KACR,IAAI4D,GAAY,EAOhB,OALIrF,EAAIiE,SACNjE,EAAIiE,QAAQgC,GAAG,OAAQjC,GAIlB,KACLqB,GAAY,IAEb,CAAC3B,EAAKF,EAAKI,IAKR/D,IAAAC,cAAA,OAAKC,UAAU,kBAEbF,IAAAC,cAAA,OAAKoG,IAAK5C,EAAcvD,UAAU,kBAElCF,IAAAC,cAACH,EAAM,Q,kBCvCAwG,MAzECpF,IAAsC,IAArC,aAAEqF,EAAY,cAAEC,GAAetF,EAC9C,MAEOK,EAAckF,GAAmB9E,mBADxB,OAETH,EAAekF,GAAoB/E,mBAAS,MAY7CgF,EAA0BC,IAC9B,MAMMC,EANW,CACfC,MAAO,EACPC,KAAM,EACNC,SAAU,IAGiBJ,QACTK,IAAhBJ,IACFH,EAAiBG,GACbL,GACFA,EAAcK,KAKpB,OAGE7G,IAAAC,cAAA,OAAKC,UAAU,WACbF,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,SACEiH,KAAK,QACLC,IAAI,IACJC,IAAI,IACJC,KAAK,OACLvG,OAAQS,EAzCA,MAyCsB,EAC9B+F,SArCoBC,IAC1B,MACMC,EAAc9E,WAAW6E,EAAME,OAAO3G,OACtC4G,EAAWC,KAAKC,MARR,KAMIC,EAEoBL,GACtCf,EAAgBiB,GACZnB,GACFA,EAAamB,IAgCTxH,UAAU,WAEZF,IAAAC,cAAA,OAAKC,UAAU,kBAAkBqB,IAEnCvB,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,UACEC,UAA6B,IAAlBsB,EAAsB,WAAa,GAC9CsG,QAASA,IAAMnB,EAAuB,UACvC,SAGD3G,IAAAC,cAAA,UACEC,UAA6B,IAAlBsB,EAAsB,WAAa,GAC9CsG,QAASA,IAAMnB,EAAuB,SACvC,QAGD3G,IAAAC,cAAA,UACEC,UAA6B,KAAlBsB,EAAuB,WAAa,GAC/CsG,QAASA,IAAMnB,EAAuB,aACvC,eC0JMoB,I,yBCzHb,SAAStH,EAAaC,GACpB,OAAe,OAAXA,EACO,IAGJA,EAAOC,eAAe,QAAS,CAAEC,sBAAuB,IAGjE,SAASC,EAAoBC,EAAOC,GAElC,OADoBD,EAAQC,EAAS,KACnBC,QAAQ,GAG9B,SAASgH,EAAmBC,EAAYC,GACtC,OAAOA,EAAQC,OAAO,CAACpH,EAAOqH,IAAQrH,EAAQ2B,WAAW0F,EAAIH,GAAYI,QAAQ,KAAM,MAAQ,EAAG,GAGnFC,MAhHHpH,IAAkD,IAAjD,YAAEC,EAAW,aAAEI,EAAY,cAAEC,GAAcN,EAGxD,MAAOqH,EAAYC,GAAiB7G,mBAAS,CAC3C,CAAE8G,MAAO,UAAWC,UAAU,EAAMC,MAAM,EAAOC,YAAa,gBAAiBC,MAAO,KACtF,CAAEJ,MAAO,KAAMG,YAAa,gBAAgBC,MAAO,KACnD,CAAEJ,MAAO,KAAMG,YAAa,gBAAgBC,MAAO,KACnD,CAAEJ,MAAO,aAAcG,YAAa,gBAAgBC,MAAO,KAC3D,CAAEJ,MAAO,UAAWG,YAAa,iBAAiBC,MAAO,IACzD,CAAEJ,MAAO,UAAWG,YAAa,iBAAiBC,MAAO,IACzD,CAAEJ,MAAO,UAAWG,YAAa,iBAAiBC,MAAO,IACzD,CAAEJ,MAAO,UAAWG,YAAa,iBAAiBC,MAAO,IACzD,CAAEJ,MAAO,UAAWG,YAAa,iBAAiBC,MAAO,IACzD,CAAEJ,MAAO,YAAaG,YAAa,iBAAiBC,MAAO,KAC3D,CAAEJ,MAAO,IAAKG,YAAa,iBAAiBC,MAAO,MAGnD,IAAK1H,IAAgBA,EAAYW,SAC/B,OAAO,KAGT,MAAMoG,EAAU/G,EAAYW,SAAS3B,IAAK+B,IACxC,MAAM4G,EAAiB5G,EAAQC,WAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,IAElE,YAAuByF,IAAnB6B,EAEK,CACLC,QAAS7G,EAAQC,WAAoB,QACrC6G,GAAI,GACJC,GAAI,GACJ3G,WAAY,qBACZ,UAAW,qBACX,UAAW,qBACX,UAAW,qBACX,UAAW,qBACX,UAAW,qBACX,YAAa,qBACb,IAAK,sBAKF,CACLyG,QAAS7G,EAAQC,WAAoB,QACrC6G,GAAI9G,EAAQC,WAAW,IACvB8G,GAAI/G,EAAQC,WAAW,IACvBG,WAAY7B,EAAaqI,GACzB,UAAWrI,EAAayB,EAAQC,WAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KACnE,UAAWf,EAAayB,EAAQC,WAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KACnE,UAAWf,EAAayB,EAAQC,WAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KACnE,UAAWf,EAAayB,EAAQC,WAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KACnE,UAAWf,EAAayB,EAAQC,WAAW,OAADI,OAAQhB,EAAY,MAAAgB,OAAKf,KACnE,YAAaf,EAAayB,EAAQC,WAAW,SAADI,OAAUhB,EAAY,MAAAgB,OAAKf,KACvE,IAAKX,EACHqB,EAAQC,WAAW,SAADI,OAAUhB,EAAY,MAAAgB,OAAKf,IAC7CsH,MAKAI,EAAW,CACfH,QAAS,QACTC,GAAI,GACJC,GAAI,GACJ3G,WAAY7B,EAAauH,EAAmB,aAAcE,IAC1D,UAAWzH,EAAauH,EAAmB,UAAWE,IACtD,UAAWzH,EAAauH,EAAmB,UAAWE,IACtD,UAAWzH,EAAauH,EAAmB,UAAWE,IACtD,UAAWzH,EAAauH,EAAmB,UAAWE,IACtD,UAAWzH,EAAauH,EAAmB,UAAWE,IACtD,YAAazH,EAAauH,EAAmB,YAAaE,IAC1D,IAAKrH,EACHmH,EAAmB,YAAaE,GAChCF,EAAmB,aAAcE,IAGnCiB,SAAU,aAINC,EAAU,IAAIlB,EAASgB,GAO7B,OACElJ,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAACoJ,cAAW,CAACnB,QAASkB,EAASE,iBAJV,YAI8Cf,WAAYA,M,MCExEgB,MA/FarI,IAA8D,IAA7D,MAAEsI,EAAK,QAAEC,EAAO,gBAAEC,EAAe,mBAAEC,GAAoBzI,EAClF,MAAO0I,EAAcC,GAAmBlI,oBAAS,IAC1CmI,EAAYC,GAAiBpI,mBAAS,IAEvCqI,EAActG,iBAAO,MAErBuG,EAAuB1C,IACtByC,EAAY5F,QAAQ8F,SAAS3C,EAAME,SACtCoC,GAAgB,IAIpBjI,oBAAU,KACRuI,SAASC,iBAAiB,QAASH,GAC5B,KACLE,SAASE,oBAAoB,QAASJ,KAEvC,IAEH,MAoBMK,EAAkBb,EACrBc,OAAOC,GAAoB,MAAVA,GACjBD,OAAQC,GAAWA,EAAOC,cAAcC,SAASZ,EAAWW,gBAG/D,OACEzK,IAAAC,cAAA,OAAKC,UAAU,oBACbF,IAAAC,cAAA,aAAQuJ,EAAM,KACdxJ,IAAAC,cAAA,OAAKC,UAAU,kBAAkBmG,IAAK2D,GACpChK,IAAAC,cAAA,SACEiH,KAAK,OACLyD,YAAW,aAAApI,OAAeiH,GAC1B1I,MAAOgJ,EACPxC,SAjBoB7C,IAC1BsF,EAActF,EAAEgD,OAAO3G,QAiBjBgH,QAASA,IAAM+B,GAAgB,KAEhCD,GACC5J,IAAAC,cAAA,OAAKC,UAAU,iBACbF,IAAAC,cAAA,WACED,IAAAC,cAAA,SACEiH,KAAK,WACL0D,GAAE,YAAArI,OAAciH,GAChB1I,MAAK,YAAAyB,OAAciH,GACnBqB,QAASnB,EAAgBoB,SAAWrB,EAAQqB,OAC5CxD,SA5CUyD,KAClBrB,EAAgBoB,SAAWrB,EAAQqB,OACrCnB,EAAmB,IAEnBA,EAAmBF,MA0CXzJ,IAAAC,cAAA,SAAO+K,QAAO,YAAAzI,OAAciH,IAAS,eAEtCc,EAAgBnK,IAAKqK,GACpBxK,IAAAC,cAAA,OAAKK,IAAKkK,GACRxK,IAAAC,cAAA,SACEiH,KAAK,WACL0D,GAAIJ,EACJ1J,MAAO0J,EACPK,QAASnB,EAAgBgB,SAASF,GAClClD,SAAUA,IA/CEkD,KACtBd,EAAgBgB,SAASF,GAC3Bb,EAAmBD,EAAgBa,OAAQU,GAAmBA,IAAmBT,IAEjFb,EAAmB,IAAID,EAAiBc,KA2CZU,CAAmBV,KAErCxK,IAAAC,cAAA,SAAO+K,QAASR,GACdxK,IAAAC,cAAA,YAAOuK,U,MCmJVW,MA7NGjK,IAAwE,IAAvE,yBAAEkK,EAAwB,YAAEjK,EAAW,WAAEC,EAAU,WAAEC,GAAYH,EAElF,MAAOmK,EAAeC,GAAoB3J,mBAAS,KAC5C4J,EAAcC,GAAmB7J,mBAAS,KAC1C8J,EAAcC,GAAmB/J,mBAAS,KAE1CgK,EAAgBC,GAAqBjK,mBAAS,KAC9CkK,EAAeC,GAAoBnK,mBAAS,KAC5CoK,EAAeC,GAAoBrK,mBAAS,KAE5CsK,EAAmBC,GAAwBvK,mBAAS,KACpDwK,EAAkBC,GAAuBzK,mBAAS,KAClD0K,EAAkBC,GAAuB3K,mBAAS,IAkLzD,OAhLAC,oBAAU,KACR2K,IACGC,IAAI,iCACJC,KAAMC,IACLR,EAAqBQ,EAASC,KAAK7K,UACnC,MAAM8K,EAAYF,EAASC,KAAK7K,SAAS3B,IACtC+B,GAAYA,EAAQC,WAAW4G,SAElC6C,EAAkBgB,KAEnBC,MAAOC,IACNpI,QAAQoI,MAAM,wCAAyCA,KAG3DP,IACGC,IAAI,gCACJC,KAAMC,IACLN,EAAoBM,EAASC,KAAK7K,UAClC,MAAMiL,EAAcL,EAASC,KAAK7K,SAAS3B,IACxC+B,GAAYA,EAAQC,WAAW6K,QAElClB,EAAiBiB,KAElBF,MAAOC,IACNpI,QAAQoI,MAAM,uCAAwCA,KAG1DP,IACGC,IAAI,gCACJC,KAAMC,IACLJ,EAAoBI,EAASC,KAAK7K,UAClC,MAAMmL,EAAcP,EAASC,KAAK7K,SAAS3B,IACxC+B,GAAYA,EAAQC,WAAWmD,QAElC0G,EAAiBiB,KAElBJ,MAAOC,IACNpI,QAAQoI,MAAM,uCAAwCA,MAEzD,IAEHlL,oBAAU,KAER,MAAMsL,EAAyBf,EAC5B5B,OAAQrI,GAAYmJ,EAAcX,SAASxI,EAAQC,WAAW4G,UAC9D5I,IAAK+B,GAAYA,EAAQC,WAAW6K,QAEvClB,EAAiBoB,IAChB,CAAC7B,EAAec,IAEnBvK,oBAAU,KAER,MAAMuL,EAAyBd,EAC5B9B,OACErI,GACCmJ,EAAcX,SAASxI,EAAQC,WAAW4G,UAC1CwC,EAAab,SAASxI,EAAQC,WAAW6K,SAE5C7M,IAAK+B,GAAYA,EAAQC,WAAWmD,QAEvC0G,EAAiBmB,IAChB,CAAC9B,EAAeE,EAAcc,IAEjCzK,oBAAU,KACR8C,QAAQC,IAAI,qBACZ,MAAMyI,EAA0B,GAC1BC,EAAyB,GACzBC,EAAyB,GAE3BjC,EAAcP,OAAS,GAAKS,EAAaT,OAAS,GAAKW,EAAaX,OAAS,GAC/EpG,QAAQC,IAAI,uBACZyI,EAAwBG,QACnBtB,EACA1B,OAAQrI,GAEmB,IAAxBqJ,EAAaT,QACW,IAAxBW,EAAaX,QACY,IAAzBO,EAAcP,QAITO,EAAcX,SAASxI,EAAQC,WAAW4G,UAElD5I,IAAK+B,IAAO,CACXgF,KAAM,UACN/E,WAAYD,EAAQC,WACpBqL,SAAUtL,EAAQsL,aAKxBH,EAAuBE,QAClBpB,EACA5B,OAAQrI,IACPwC,QAAQC,IAAI,8BAEe,IAAxB4G,EAAaT,QACZS,EAAab,SAASxI,EAAQC,WAAW6K,WACjB,IAAzB3B,EAAcP,QACbO,EAAcX,SAASxI,EAAQC,WAAW4G,YAG/C5I,IAAK+B,IAAO,CACXgF,KAAM,UACN/E,WAAYD,EAAQC,WACpBqL,SAAUtL,EAAQsL,aAKxBF,EAAuBC,QAClBlB,EACA9B,OAAQrI,IACPwC,QAAQC,IAAI,8BAEe,IAAxB4G,EAAaT,QACZS,EAAab,SAASxI,EAAQC,WAAW6K,WAClB,IAAxBvB,EAAaX,QACZW,EAAaf,SAASxI,EAAQC,WAAWmD,WACjB,IAAzB+F,EAAcP,QACbO,EAAcX,SAASxI,EAAQC,WAAW4G,YAG/C5I,IAAK+B,IAAO,CACXgF,KAAM,UACN/E,WAAYD,EAAQC,WACpBqL,SAAUtL,EAAQsL,eAKxBJ,EAAwBG,QACnBtB,EAAkB9L,IAAK+B,IAAO,CAC/BgF,KAAM,UACN/E,WAAYD,EAAQC,WACpBqL,SAAUtL,EAAQsL,aAGtBH,EAAuBE,QAClBpB,EAAiBhM,IAAK+B,IAAO,CAC9BgF,KAAM,UACN/E,WAAYD,EAAQC,WACpBqL,SAAUtL,EAAQsL,aAGtBF,EAAuBC,QAClBlB,EAAiBlM,IAAK+B,IAAO,CAC9BgF,KAAM,UACN/E,WAAYD,EAAQC,WACpBqL,SAAUtL,EAAQsL,cAKxB,MAAMC,EAAe,CACnBC,oBAAqB,CACnBxG,KAAM,oBACNpF,SAAUsL,GAEZO,mBAAoB,CAClBzG,KAAM,oBACNpF,SAAUuL,GAEZO,mBAAoB,CAClB1G,KAAM,oBACNpF,SAAUwL,IAId5I,QAAQC,IAAI,yBAA0B8I,EAAaC,qBACnDhJ,QAAQC,IAAI,qBAAsB8I,EAAaE,oBAC/CjJ,QAAQC,IAAI,qBAAsB8I,EAAaG,oBAE/CxC,EAAyBqC,IACxB,CAACpC,EAAeE,EAAcE,EAAcQ,EAAmBE,EAAkBE,IAGlFrM,IAAAC,cAAA,WACED,IAAAC,cAAA,WACAD,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAACsJ,EAAmB,CAClBC,MAAM,UACNC,QAASkC,EACTjC,gBAAiB2B,EACjB1B,mBAAoB2B,KAGxBtL,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAACsJ,EAAmB,CAClBC,MAAM,eACNC,QAASoC,EACTnC,gBAAiB6B,EACjB5B,mBAAoB6B,KAGxBxL,IAAAC,cAAA,OAAKC,UAAU,kBACbF,IAAAC,cAACsJ,EAAmB,CAClBC,MAAM,eACNC,QAASsC,EACTrC,gBAAiB+B,EACjB9B,mBAAoB+B,O,MCnNf,SAASmC,IACpB,MAAO1M,EAAa2M,GAAkBnM,mBAAS,OACxCP,EAAY2M,GAAiBpM,mBAAS,OACtCN,EAAY2M,GAAiBrM,mBAAS,OACtCJ,EAAckF,GAAmB9E,mBAAS,OAC1CH,EAAekF,GAAoB/E,mBAAS,IAC5CsC,EAAeC,GAAoBvC,mBAAS,OAC5C8L,EAAcQ,GAAmBtM,mBAAS,CAC/C+L,oBAAqB,GACrBC,mBAAoB,GACpBC,mBAAoB,KAMhBM,EAAoBC,IACxB1H,EAAgB0H,IAEZC,EAAqBxH,IACzBF,EAAiBE,IAiCrB,OAvBEhF,oBAAU,MACNyM,iBACE,IACE,MAAMC,QAAwB/B,IAAMC,IAAI,iCACxCsB,EAAeQ,EAAgB3B,MAE/B,MAAM4B,QAAuBhC,IAAMC,IAAI,gCACvCuB,EAAcQ,EAAe5B,MAE7B,MAAM6B,QAAuBjC,IAAMC,IAAI,gCACvCwB,EAAcQ,EAAe7B,MAC3BjI,QAAQC,IAAI4J,EAAeC,EAAe,mBAE5C,MAAO1B,GACPpI,QAAQoI,MAAM,uBAAwBA,IAI1C2B,IACC,IAKLzO,IAAAC,cAAA,WACED,IAAAC,cAACsD,EAAO,CAACjC,WAAY2C,EAAesC,aAAc2H,EAAkB1K,eAhC3CkL,IACzBxK,EAAiBwK,IA+BuFnN,aAAcA,EAAciF,cAAe4H,EAAmB5M,cAAeA,IAErLxB,IAAAC,cAACqG,EAAO,CAACC,aAAc2H,EAAkB3M,aAAcA,EAAciF,cAAe4H,EAAmB5M,cAAeA,IACtHxB,IAAAC,cAACgB,EAAO,CAACE,YAAaA,EAAaC,WAAYA,EAAYC,WAAYA,EAAYC,WAAY2C,EAAesC,aAAc2H,EAAkB3M,aAAcA,EAAciF,cAAe4H,EAAmB5M,cAAeA,IAC3NxB,IAAAC,cAACkL,EAAS,CAACC,yBA/CqBqC,IAChCQ,EAAgBR,MA+ChBzN,IAAAC,cAAA,WAAKD,IAAAC,cAACqI,EAAK,CAACnH,YAAasM,EAAaC,oBAAqBtM,WAAYA,EAAYC,WAAYA,EAAYkF,aAAc2H,EAAkB3M,aAAcA,EAAciF,cAAe4H,EAAmB5M,cAAeA,MChE9NmN,IAASC,OACP5O,IAAAC,cAACD,IAAM6O,WAAU,KACf7O,IAAAC,cAAC4N,EAAG,OAEN1D,SAAS2E,eAAe,W","file":"static/js/main.f1bedb32.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Legend.css';\r\n\r\nfunction Legend() {\r\n    const layers = ['Phase 1', 'Phase 2', 'Phase 3', 'Phase 4', 'Phase 5', 'No data'];\r\n    const colors = ['#53ca57', '#ffe252', '#fa890f', '#eb3333', '#900101e3','#ffffff'];\r\n\r\n    return (\r\n        <nav className='legend'>\r\n            <div className='legend-container'>\r\n                {layers.map((layer, i) => (\r\n                    <div key={i} className='legend-item'>\r\n                        <span className='legend-key' style={{ backgroundColor: colors[i] }} />\r\n                        <span className='legend-value'>{layer}</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Legend;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Sidebar.css';\r\nimport App from '../App';\r\n\r\nfunction Sidebar({ countryData, level1Data, level2Data, regionInfo, selectedYear, selectedMonth }) { //REGIONINFO TRAE EL KEY\r\n  const [appendedData, setAppendedData] = useState([]);\r\n  \r\n\r\n  useEffect(() => {\r\n    if (countryData && level1Data && level2Data){\r\n        const mergedData = [ ...countryData.features, ...level1Data.features, ...level2Data.features ];\r\n        setAppendedData(mergedData);\r\n    };\r\n    \r\n  }, [regionInfo]);\r\n\r\n\r\n  if (!regionInfo) {\r\n    return null;\r\n  }\r\n\r\n  const clickedKey = regionInfo.key;\r\n\r\n  \r\n  let foundRow = null;\r\n  if (appendedData) {\r\n    foundRow = appendedData.find((feature) => feature.properties.Key === clickedKey);\r\n\r\n  }\r\n\r\n  const properties = foundRow ? foundRow.properties : {};\r\n\r\n  const Name= properties['Name_2'];\r\n  const Population = formatNumber(properties[`POP-${selectedYear}-0${selectedMonth}`]);\r\n  const Phase1 = formatNumber(properties[`PH1-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent1 = calculatePercentage(\r\n    parseFloat(properties[`PH1-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n\r\n  const Phase2 = formatNumber(properties[`PH2-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent2 = calculatePercentage(\r\n    parseFloat(properties[`PH2-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n  const Phase3 = formatNumber(properties[`PH3-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent3 = calculatePercentage(\r\n    parseFloat(properties[`PH3-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n  const Phase4 = formatNumber(properties[`PH4-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent4 = calculatePercentage(\r\n    parseFloat(properties[`PH4-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n  const Phase5 = formatNumber(properties[`PH5-${selectedYear}-0${selectedMonth}`]);\r\n  const Percent5 = calculatePercentage(\r\n    parseFloat(properties[`PH5-${selectedYear}-0${selectedMonth}`]),\r\n    parseFloat(properties[`POP-${selectedYear}-0${selectedMonth}`])\r\n  );\r\n\r\n  return (\r\n    <nav className='sidebar'>\r\n      <div className='sidebar-container'>\r\n        <div className='logo'>\r\n          <img src='/images/family_icon.jpg' alt='Family Icon' />\r\n          <span className='logo-text'>Food and nutrition situation {selectedYear} </span> {/* adding selected month as trial*/}\r\n        </div>\r\n\r\n        <div className='region-info'>\r\n          {/* Display information about the hovered region */}\r\n          <h2>\r\n            <div>\r\n              <p>\r\n              {Name}\r\n              </p>\r\n            </div>\r\n          </h2>\r\n\r\n          <div className='info-row'>\r\n            <h4>Total population:</h4>\r\n            <p>{Population}</p>\r\n          </div>\r\n\r\n          <div className='info-row'>\r\n            <h4>Phase 1:</h4>\r\n            <p>{Phase1}</p>\r\n            <p>{Percent1}%</p>\r\n          </div>\r\n          <div className='info-row'>\r\n            <h4>Phase 2:</h4>\r\n            <p>{Phase2}</p>\r\n            <p>{Percent2}%</p>\r\n          </div>\r\n          <div className='info-row'>\r\n            <h4>Phase 3:</h4>\r\n            <p>{Phase3}</p>\r\n            <p>{Percent3}%</p>\r\n          </div>\r\n          <div className='info-row'>\r\n            <h4>Phase 4:</h4>\r\n            <p>{Phase4}</p>\r\n            <p>{Percent4}%</p>\r\n          </div>\r\n          <div className='info-row'>\r\n            <h4>Phase 5:</h4>\r\n            <p>{Phase5}</p>\r\n            <p>{Percent5}%</p>\r\n          </div>\r\n          {/* Add more fields as needed */}\r\n        </div>\r\n        {/* More sidebar content */}\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nfunction formatNumber(number) {\r\n  return number ? number.toLocaleString('en-US', { maximumFractionDigits: 0 }) : '';\r\n}\r\n\r\nfunction calculatePercentage(value, total) {\r\n  const percentage = total ? ((value || 0) / total) * 100 : 0;\r\n  return percentage.toFixed(2); // Displaying percentage with two decimal places\r\n}\r\n\r\nexport default Sidebar;\r\n","// EVERYTHING WORKS BUT ITS SUPER SLOW WHEN SELECTING REGIONS (ON-CLICK)- NEED TO OPTIMIZE RE-RENDERS IN THE USEEFFECT\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport mapboxgl from 'mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport Legend from './Legend';\r\nimport App from '../App';\r\nimport './MapView.css';\r\nimport Sidebar from './Sidebar';\r\nimport { selected } from '@syncfusion/ej2-react-pivotview';\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoibWFyaWFuYWp2LSIsImEiOiJjbGs3eXJmbzEwYXR3M2RxbnRuOHVkaHV3In0.rVa0wb_O5OTeuk07J90w5A';\r\n\r\nfunction MapView({selectedYear, selectedMonth, onChangeRegion}) {\r\n  const mapContainer = useRef(null);\r\n  const map = useRef(null);\r\n  const [lng, setLng] = useState(0);\r\n  const [lat, setLat] = useState(17);\r\n  const [zoom, setZoom] = useState(3.4);\r\n  const [hoveredRegion, setHoveredRegion] = useState(null);\r\n\r\n  const initializeMap = () => {\r\n    map.current = new mapboxgl.Map({\r\n      container: mapContainer.current,\r\n      style: 'mapbox://styles/marianajv-/cllf4b5be012q01pb6nqq4k5x',\r\n      center: [lng, lat],\r\n      zoom: zoom\r\n    });\r\n    map.current.on('move', handleMove);\r\n    layerNames.forEach(layerName => {\r\n      map.current.on('click', layerName, createLayerClickHandler);\r\n    }); \r\n\r\n\r\n  };\r\n\r\n  const handleMove = () => {\r\n    setLng(map.current.getCenter().lng.toFixed(4));\r\n    setLat(map.current.getCenter().lat.toFixed(4));\r\n    setZoom(map.current.getZoom().toFixed(2));\r\n  };\r\n\r\n  const layerNames = ['output_country-2uwmmy', 'output_level1-5iewsu', 'output_level2-8nur76'];\r\n\r\n  const createLayerClickHandler = (e) => {// CLICKHANDLER si lo dejamos en key ya no tiene que depender de year, solo de la posicion \r\n    console.log('clickhandler ran', e.features)\r\n      \r\n    const feature = e.features[0];\r\n    const lngLat = e.lngLat;\r\n\r\n    const newHoveredRegion = {\r\n      name: feature.properties['Name_2'],\r\n      key: feature.properties['Key'] \r\n    };\r\n\r\n    let popup = null;\r\n\r\n    if (popup) {\r\n      popup.remove();\r\n    }\r\n\r\n    popup = new mapboxgl.Popup({\r\n      maxWidth: '100px',\r\n      maxHeight: '50px',\r\n      className: 'custom-popup'\r\n    })\r\n    .setLngLat(lngLat)\r\n    .setHTML(`<h5>${feature.properties.Name_2}</h5>`)\r\n  .addTo(map.current);\r\n\r\n    onChangeRegion(newHoveredRegion);\r\n  };//CLICKHANDLER\r\n  \r\n// separating useffects\r\n\r\nuseEffect(() => {\r\n  let isMounted = true;\r\n\r\n  if (!map.current) {\r\n    initializeMap();\r\n  } else {\r\n\r\n    layerNames.forEach(layerName => {\r\n      const existingLayer = map.current.getLayer(layerName);\r\n      if (existingLayer) {\r\n        map.current.setPaintProperty(\r\n          layerName,\r\n          'fill-color',\r\n          getMapboxExpression(selectedYear, selectedMonth)\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  return () => {\r\n    isMounted = false;\r\n  };\r\n}, [selectedYear, selectedMonth]);\r\n\r\nuseEffect(() => {\r\n  let isMounted = true;\r\n\r\n  if (map.current) {\r\n    map.current.on('move', handleMove);\r\n    \r\n  }\r\n\r\n  return () => {\r\n    isMounted = false;\r\n  };\r\n}, [lat, lng, zoom]);\r\n\r\n\r\n  \r\n    return (\r\n      <div className='view-container'>\r\n        \r\n        <div ref={mapContainer} className=\"map-container\" />\r\n\r\n        <Legend/>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n\r\n  function getMapboxExpression(selectedYear, selectedMonth) {\r\n    const yearValue = parseInt(selectedYear);\r\n    const monthValue = parseInt(selectedMonth);\r\n    \r\n    return [\r\n      'case',\r\n      ['==', ['number', ['get', `CLAS-${yearValue}-0${monthValue}`]], 1], '#53ca57',\r\n      ['==', ['number', ['get', `CLAS-${yearValue}-0${monthValue}`]], 2], '#ffe252',\r\n      ['==', ['number', ['get', `CLAS-${yearValue}-0${monthValue}`]], 3], '#fa890f',\r\n      ['==', ['number', ['get', `CLAS-${yearValue}-0${monthValue}`]], 4], '#eb3333',\r\n      '#ffffff'\r\n    ];\r\n  }\r\n\r\n\r\nexport default MapView;\r\n","\r\nimport React, { useState } from 'react';\r\nimport './Timebar.css';\r\nimport MapView from './MapView';\r\n\r\n\r\nconst Timebar = ({ onChangeYear, onChangeMonth }) => {\r\n  const minYear = 2014;\r\n  const maxYear = 2023;\r\n  const [selectedYear, setSelectedYear] = useState(maxYear);\r\n  const [selectedMonth, setSelectedMonth] = useState(null);\r\n\r\n  const handleSliderChange = (event) => {\r\n    const yearRange = maxYear - minYear;\r\n    const sliderValue = parseFloat(event.target.value);\r\n    const selected = Math.round(minYear + sliderValue * yearRange);\r\n    setSelectedYear(selected);\r\n    if (onChangeYear) {\r\n      onChangeYear(selected);\r\n    }\r\n  };\r\n\r\n  const handleMonthButtonClick = (month) => {\r\n    const monthMap = {\r\n      March: 3,\r\n      June: 6,\r\n      November: 11,\r\n    };\r\n\r\n    const monthNumber = monthMap[month];\r\n    if (monthNumber !== undefined) {\r\n      setSelectedMonth(monthNumber);\r\n      if (onChangeMonth) {\r\n        onChangeMonth(monthNumber);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    \r\n    \r\n    <div className=\"timebar\">\r\n      <div className=\"year-bar\">\r\n        <input\r\n          type=\"range\"\r\n          min=\"0\"\r\n          max=\"1\"\r\n          step=\"0.01\"\r\n          value={(selectedYear - minYear) / (maxYear - minYear)}\r\n          onChange={handleSliderChange}\r\n          className=\"slider\"\r\n        />\r\n        <div className=\"year-indicator\">{selectedYear}</div>\r\n      </div>\r\n      <div className=\"month-buttons\">\r\n        <button\r\n          className={selectedMonth === 3 ? 'selected' : ''}\r\n          onClick={() => handleMonthButtonClick('March')}\r\n        >\r\n          March\r\n        </button>\r\n        <button\r\n          className={selectedMonth === 6 ? 'selected' : ''}\r\n          onClick={() => handleMonthButtonClick('June')}\r\n        >\r\n          June\r\n        </button>\r\n        <button\r\n          className={selectedMonth === 11 ? 'selected' : ''}\r\n          onClick={() => handleMonthButtonClick('November')}\r\n        >\r\n          November\r\n        </button>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timebar;\r\n","import React, { useState } from 'react';\r\nimport _ from 'lodash';\r\nimport './Table.css'; \r\nimport Timebar from './Timebar';\r\nimport App from '../App';\r\n\r\nfunction Table({ countryData, level1Data, level2Data, selectedYear }) {\r\n \r\n\r\n    const renderColumns = () => {\r\n        const columns = [];\r\n      \r\n        if (level2Data && level2Data.features && level2Data.features.length > 0) {\r\n          const properties = level2Data.features[0].properties;\r\n          const columnNames=['Population', 'Phase 1','Phase 2','Phase 3','Phase 4','Phase 5','Phase 3-5'];      \r\n          const columnColors = ['grey-bg', 'green-bg', 'yellow-bg', 'orange-bg', 'red-bg', 'dark-red-bg', 'dark-red-bg'];      \r\n \r\n\r\n          Object.keys(properties).forEach((key, index) => {\r\n            \r\n            if (key.includes(`-${selectedYear}-03`)) {\r\n              if (key.includes('CLAS')|| key.includes('PROT')) { \r\n                return; // Skip unwanted columns\r\n              }\r\n      \r\n              const adjustedKey = key.replace(`-${selectedYear}-03`, ''); // Remove '-2023-03' from the key\r\n              const columnClass = columnColors[1];\r\n\r\n              \r\n              columns.push({ key: adjustedKey, class: columnClass });\r\n            }\r\n          });\r\n      \r\n          // Push the last column with the dark red class\r\n          columns.unshift({ key: 'L2', class: 'green-bg' });\r\n          columns.unshift({ key: 'L1', class: 'green-bg' });\r\n          columns.push({ key: '%', class: 'green-bg' });\r\n        }\r\n      \r\n        return columns.map((column, index) => (\r\n          <th key={index} className={column.class}>\r\n            {column.key}\r\n          </th>\r\n        ));\r\n      };\r\n  \r\n      const renderCountryRows = () => {\r\n        if (countryData && countryData.features && countryData.features.length > 0) {\r\n          return countryData.features.map((feature, index) => { \r\n            const properties = feature.properties;// hasta aqui todo igual\r\n         \r\n    \r\n            return (\r\n                <tr key={index}>\r\n                  <td>{properties.Country}</td>\r\n                  <td></td>\r\n              <td></td>\r\n  \r\n    \r\n    \r\n                  {Object.entries(properties).map(([key, value]) => {\r\n                    if (key.includes(`-${selectedYear}-03`)) {\r\n                      if (key.includes('CLAS')|| key.includes('PROT')) {\r\n                        return null;\r\n                      }\r\n                      return <td key={key}>{formatNumber(value)}</td>;\r\n                    }\r\n                    return null;\r\n                  })}\r\n               <td>\r\n    \r\n                </td>\r\n              </tr>\r\n            );\r\n          });\r\n        }\r\n        return null;\r\n      };    \r\n\r\n\r\n      const renderLevel1Rows = () => {\r\n        if (level1Data && level1Data.features && level1Data.features.length > 0) {\r\n          return level1Data.features.map((feature, index) => { \r\n            const properties = feature.properties;// hasta aqui todo igual\r\n         \r\n    \r\n            return (\r\n                <tr key={index}>\r\n                  <td>{properties.Country}</td>\r\n                  <td>{properties.Name_1}</td>\r\n              <td></td>\r\n  \r\n    \r\n    \r\n                  {Object.entries(properties).map(([key, value]) => {\r\n                    if (key.includes(`-${selectedYear}-03`)) {\r\n                      if (key.includes('CLAS')|| key.includes('PROT')) {\r\n                        return null;\r\n                      }\r\n                      return <td key={key}>{formatNumber(value)}</td>;\r\n                    }\r\n                    return null;\r\n                  })}\r\n               <td>\r\n    \r\n                </td>\r\n              </tr>\r\n            );\r\n          });\r\n        }\r\n        return null;\r\n      };    \r\n\r\n\r\n\r\n\r\n\r\n\r\n  const renderRows = () => {\r\n    if (level2Data && level2Data.features && level2Data.features.length > 0) {\r\n      return level2Data.features.map((feature, index) => { \r\n        const properties = feature.properties;// hasta aqui todo igual\r\n     \r\n\r\n        return (\r\n            <tr key={index}>\r\n              <td>{properties.Country}</td>\r\n              <td>{properties.Name_1}</td>\r\n              <td>{properties.Name_2}</td>\r\n\r\n\r\n\r\n              {Object.entries(properties).map(([key, value]) => {\r\n                if (key.includes(`-${selectedYear}-03`)) {\r\n                  if (key.includes('CLAS')|| key.includes('PROT')) {\r\n                    return null;\r\n                  }\r\n                  return <td key={key}>{formatNumber(value)}</td>;\r\n                }\r\n                return null;\r\n              })}\r\n           <td>\r\n\r\n            </td>\r\n          </tr>\r\n        );\r\n      });\r\n    }\r\n    return null;\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"table-container\">\r\n      <div className=\"table-wrapper\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"green-bg\"></th>\r\n              {renderColumns()}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {renderCountryRows()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n  \r\n      <div className=\"table-spacing\" /> {/* Add some spacing */}\r\n      \r\n      <div className=\"table-wrapper\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"green-bg\"></th>\r\n              {renderColumns()}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {renderLevel1Rows()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div className=\"table-spacing\" /> {/* Add some spacing */}\r\n      <div className=\"table-wrapper\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"green-bg\"></th>\r\n              {renderColumns()}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {renderRows()}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n    \r\n\r\n    \r\n  );\r\n  \r\n}\r\n\r\n\r\nfunction formatNumber(number) {\r\n  if (number === null) {\r\n      return '0'; // Return '0' as a string or 0 if you prefer a number\r\n  }\r\n  \r\n  return number.toLocaleString('en-US', { maximumFractionDigits: 0 });\r\n}\r\n\r\n\r\nfunction calculatePercentage(value, total) {\r\n    const percentage = (value / total) * 100;\r\n    return percentage.toFixed(2); // Displaying percentage with two decimal places\r\n}\r\n\r\n\r\n\r\nexport default Table;\r\n","import React, { useState } from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport App from '../App';\r\nimport Timebar from './Timebar';\r\nimport 'ag-grid-community/styles/ag-grid.css';\r\nimport 'ag-grid-community/styles/ag-theme-alpine.css';\r\nimport './DraftRow.css';\r\n\r\nconst Draft = ({ countryData, selectedYear, selectedMonth}) => {\r\n // console.log(selectedMonth);\r\n  \r\n  const [columnDefs, setColumnDefs] = useState([\r\n    { field: 'Country', rowgroup: true, hide: false, headerClass: 'custom-header', width: 100  },\r\n    { field: 'L1', headerClass: 'custom-header',width: 100  },\r\n    { field: 'L2', headerClass: 'custom-header',width: 100  },\r\n    { field: 'Population', headerClass: 'custom-header',width: 120  },\r\n    { field: 'Phase 1', headerClass: 'custom-header1',width: 90 },\r\n    { field: 'Phase 2', headerClass: 'custom-header2',width: 90  },\r\n    { field: 'Phase 3', headerClass: 'custom-header3',width: 90  },\r\n    { field: 'Phase 4', headerClass: 'custom-header4',width: 90  },\r\n    { field: 'Phase 5', headerClass: 'custom-header5',width: 90  },\r\n    { field: 'Phase 3-5', headerClass: 'custom-header5',width: 100  },\r\n    { field: '%', headerClass: 'custom-header5',width: 60  }\r\n  ]);\r\n  \r\n    if (!countryData || !countryData.features) {\r\n      return null; // Render nothing while data is being fetched\r\n    }\r\n\r\n    const rowData = countryData.features.map((feature) => {\r\n      const populationData = feature.properties[`POP-${selectedYear}-0${selectedMonth}`];\r\n  \r\n      if (populationData === undefined) {\r\n        // Data is not available for this combination, return a message\r\n        return {\r\n          Country: feature.properties['Country'],\r\n          L1: '',\r\n          L2: '',\r\n          Population: 'Data not available',\r\n          'Phase 1': 'Data not available',\r\n          'Phase 2': 'Data not available',\r\n          'Phase 3': 'Data not available',\r\n          'Phase 4': 'Data not available',\r\n          'Phase 5': 'Data not available',\r\n          'Phase 3-5': 'Data not available',\r\n          '%': 'Data not available',\r\n        };\r\n      }\r\n  \r\n      // Data is available, format it\r\n      return {\r\n        Country: feature.properties['Country'],\r\n        L1: feature.properties[''],\r\n        L2: feature.properties[''],\r\n        Population: formatNumber(populationData),\r\n        'Phase 1': formatNumber(feature.properties[`PH1-${selectedYear}-0${selectedMonth}`]),\r\n        'Phase 2': formatNumber(feature.properties[`PH2-${selectedYear}-0${selectedMonth}`]),\r\n        'Phase 3': formatNumber(feature.properties[`PH3-${selectedYear}-0${selectedMonth}`]),\r\n        'Phase 4': formatNumber(feature.properties[`PH4-${selectedYear}-0${selectedMonth}`]),\r\n        'Phase 5': formatNumber(feature.properties[`PH5-${selectedYear}-0${selectedMonth}`]),\r\n        'Phase 3-5': formatNumber(feature.properties[`PH3:5-${selectedYear}-0${selectedMonth}`]),\r\n        '%': calculatePercentage(\r\n          feature.properties[`PH3:5-${selectedYear}-0${selectedMonth}`],\r\n          populationData\r\n        ),\r\n      };\r\n    });\r\n\r\n    const totalRow = {\r\n      Country: 'Total', \r\n      L1: '', \r\n      L2: '',\r\n      Population: formatNumber(calculateColumnSum('Population', rowData)),\r\n      'Phase 1': formatNumber(calculateColumnSum('Phase 1', rowData)),\r\n      'Phase 2': formatNumber(calculateColumnSum('Phase 2', rowData)),\r\n      'Phase 3': formatNumber(calculateColumnSum('Phase 3', rowData)),\r\n      'Phase 4': formatNumber(calculateColumnSum('Phase 4', rowData)),\r\n      'Phase 5': formatNumber(calculateColumnSum('Phase 5', rowData)),\r\n      'Phase 3-5': formatNumber(calculateColumnSum('Phase 3-5', rowData)),\r\n      '%': calculatePercentage(\r\n        calculateColumnSum('Phase 3-5', rowData),\r\n        calculateColumnSum('Population', rowData)\r\n      ),\r\n      \r\n      rowClass: 'total-row',\r\n    };\r\n    \r\n    \r\n    const allRows = [...rowData, totalRow];\r\n\r\n    \r\n\r\n\r\n    const groupDisplayType = 'groupRows';\r\n  \r\n    return (\r\n      <div className=\"ag-theme-alpine\" >\r\n        <AgGridReact rowData={allRows} groupDisplayType={groupDisplayType} columnDefs={columnDefs} />\r\n\r\n      </div>\r\n    );\r\n  };\r\n\r\n  function formatNumber(number) {\r\n    if (number === null) {\r\n        return '0'; // Return '0' as a string or 0 if you prefer a number\r\n    }\r\n    \r\n    return number.toLocaleString('en-US', { maximumFractionDigits: 0 });\r\n  }\r\n  \r\n  function calculatePercentage(value, total) {\r\n    const percentage = (value / total) * 100;\r\n    return percentage.toFixed(2); // Displaying percentage with two decimal places\r\n}\r\n\r\nfunction calculateColumnSum(columnName, rowData) {\r\n  return rowData.reduce((total, row) => total + parseFloat(row[columnName].replace(/,/g, '')) || 0, 0);\r\n}\r\n  \r\n  export default Draft;","import React, { useState, useRef, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./StaticFilterOptions.css\";\r\n\r\nconst StaticFilterOptions = ({ title, options, selectedOptions, setSelectedOptions }) => {\r\n  const [showDropdown, setShowDropdown] = useState(false);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n\r\n  const dropdownRef = useRef(null);\r\n\r\n  const handleDocumentClick = (event) => {\r\n    if (!dropdownRef.current.contains(event.target)) {\r\n      setShowDropdown(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"click\", handleDocumentClick);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleDocumentClick);\r\n    };\r\n  }, []);\r\n\r\n  const handleSelectAll = () => {\r\n    if (selectedOptions.length === options.length) {\r\n      setSelectedOptions([]);\r\n    } else {\r\n      setSelectedOptions(options);\r\n    }\r\n  };\r\n\r\n  const handleOptionToggle = (option) => {\r\n    if (selectedOptions.includes(option)) {\r\n      setSelectedOptions(selectedOptions.filter((selectedOption) => selectedOption !== option));\r\n    } else {\r\n      setSelectedOptions([...selectedOptions, option]);\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (e) => {\r\n    setSearchText(e.target.value);\r\n  };\r\n\r\n  const filteredOptions = options\r\n    .filter(option => option != null)\r\n    .filter((option) => option.toLowerCase().includes(searchText.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"filter-container\">\r\n      <label>{title}:</label>\r\n      <div className=\"search-dropdown\" ref={dropdownRef}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder={`Search by ${title}`}\r\n          value={searchText}\r\n          onChange={handleSearchChange}\r\n          onClick={() => setShowDropdown(true)}\r\n        />\r\n        {showDropdown && (\r\n          <div className=\"checkbox-list\">\r\n            <div>\r\n              <input\r\n                type=\"checkbox\"\r\n                id={`selectAll${title}`}\r\n                value={`selectAll${title}`}\r\n                checked={selectedOptions.length === options.length}\r\n                onChange={handleSelectAll}\r\n              />\r\n              <label htmlFor={`selectAll${title}`}>Select All</label>\r\n            </div>\r\n            {filteredOptions.map((option) => (\r\n              <div key={option}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={option}\r\n                  value={option}\r\n                  checked={selectedOptions.includes(option)}\r\n                  onChange={() => handleOptionToggle(option)}\r\n                />\r\n                <label htmlFor={option}>\r\n                  <span>{option}</span>\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nStaticFilterOptions.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  selectedOptions: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  setSelectedOptions: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default StaticFilterOptions;","import React, { useState, useEffect } from \"react\";\r\nimport StaticFilterOptions from \"./StaticFilterOptions\";\r\nimport axios from \"axios\";\r\nimport \"./Mapfilter.css\";\r\nimport { feature } from \"@turf/turf\";\r\nimport App from \"../App\";\r\n\r\nconst Mapfilter = ({ handleFilteredDataChange, countryData, level1Data, level2Data }) => {\r\n\r\n  const [filterCountry, setFilterCountry] = useState([]);\r\n  const [level1Filter, setLevel1Filter] = useState([]);\r\n  const [level2Filter, setLevel2Filter] = useState([]);\r\n\r\n  const [countryOptions, setCountryOptions] = useState([]);\r\n  const [level1Options, setLevel1Options] = useState([]);\r\n  const [level2Options, setLevel2Options] = useState([]);\r\n\r\n  const [outputCountryData, setOutputCountryData] = useState([]);\r\n  const [outputLevel1Data, setOutputLevel1Data] = useState([]);\r\n  const [outputLevel2Data, setOutputLevel2Data] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"./data/output_country.geojson\")\r\n      .then((response) => {\r\n        setOutputCountryData(response.data.features);\r\n        const countries = response.data.features.map(\r\n          (feature) => feature.properties.Country\r\n        );\r\n        setCountryOptions(countries); \r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error loading output_country.geojson:\", error);\r\n      });\r\n\r\n    axios\r\n      .get(\"./data/output_level1.geojson\")\r\n      .then((response) => {\r\n        setOutputLevel1Data(response.data.features);\r\n        const level1Names = response.data.features.map(\r\n          (feature) => feature.properties.Name_1\r\n        );\r\n        setLevel1Options(level1Names);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error loading output_level1.geojson:\", error);\r\n      });\r\n\r\n    axios\r\n      .get(\"./data/output_level2.geojson\")\r\n      .then((response) => {\r\n        setOutputLevel2Data(response.data.features);\r\n        const level2Names = response.data.features.map(\r\n          (feature) => feature.properties.Name_2\r\n        );\r\n        setLevel2Options(level2Names);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error loading output_level2.geojson:\", error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update filterCountry and available level1Options when level1Filter changes\r\n    const availableLevel1Options = outputLevel1Data\r\n      .filter((feature) => filterCountry.includes(feature.properties.Country))\r\n      .map((feature) => feature.properties.Name_1);\r\n\r\n    setLevel1Options(availableLevel1Options);\r\n  }, [filterCountry, outputLevel1Data]);\r\n\r\n  useEffect(() => {\r\n    // Update filterCountry, level1Filter, and available level2Options when level2Filter changes\r\n    const availableLevel2Options = outputLevel2Data\r\n      .filter(\r\n        (feature) =>\r\n          filterCountry.includes(feature.properties.Country) &&\r\n          level1Filter.includes(feature.properties.Name_1)\r\n      )\r\n      .map((feature) => feature.properties.Name_2);\r\n\r\n    setLevel2Options(availableLevel2Options);\r\n  }, [filterCountry, level1Filter, outputLevel2Data]);\r\n\r\n  useEffect(() => {\r\n    console.log('Filtering data...');\r\n    const filteredCountryFeatures = [];\r\n    const filteredLevel1Features = [];\r\n    const filteredLevel2Features = [];\r\n  \r\n    if (filterCountry.length > 0 || level1Filter.length > 0 || level2Filter.length > 0) {\r\n      console.log('Applying filters...');\r\n      filteredCountryFeatures.push(\r\n        ...outputCountryData\r\n          .filter((feature) => {\r\n            if (\r\n              level1Filter.length === 0 &&\r\n              level2Filter.length === 0 &&\r\n              filterCountry.length === 0\r\n            ) {\r\n              return true;\r\n            }\r\n            return filterCountry.includes(feature.properties.Country);\r\n          })\r\n          .map((feature) => ({\r\n            type: 'Feature',\r\n            properties: feature.properties,\r\n            geometry: feature.geometry,\r\n          }))\r\n      );\r\n  \r\n      // Level 1 filter should not be affected by Level 2 filter.\r\n      filteredLevel1Features.push(\r\n        ...outputLevel1Data\r\n          .filter((feature) => {\r\n            console.log('Filtering level 1 data...');\r\n            return (\r\n              (level1Filter.length === 0 ||\r\n                level1Filter.includes(feature.properties.Name_1)) &&\r\n              (filterCountry.length === 0 ||\r\n                filterCountry.includes(feature.properties.Country))\r\n            );\r\n          })\r\n          .map((feature) => ({\r\n            type: 'Feature',\r\n            properties: feature.properties,\r\n            geometry: feature.geometry,\r\n          }))\r\n      );\r\n  \r\n      // Level 2 filter.\r\n      filteredLevel2Features.push(\r\n        ...outputLevel2Data\r\n          .filter((feature) => {\r\n            console.log('Filtering level 2 data...');\r\n            return (\r\n              (level1Filter.length === 0 ||\r\n                level1Filter.includes(feature.properties.Name_1)) &&\r\n              (level2Filter.length === 0 ||\r\n                level2Filter.includes(feature.properties.Name_2)) &&\r\n              (filterCountry.length === 0 ||\r\n                filterCountry.includes(feature.properties.Country))\r\n            );\r\n          })\r\n          .map((feature) => ({\r\n            type: 'Feature',\r\n            properties: feature.properties,\r\n            geometry: feature.geometry,\r\n          }))\r\n      );\r\n    } else {\r\n      // Handle the case when no filters are applied.\r\n      filteredCountryFeatures.push(\r\n        ...outputCountryData.map((feature) => ({\r\n          type: 'Feature',\r\n          properties: feature.properties,\r\n          geometry: feature.geometry,\r\n        }))\r\n      );\r\n      filteredLevel1Features.push(\r\n        ...outputLevel1Data.map((feature) => ({\r\n          type: 'Feature',\r\n          properties: feature.properties,\r\n          geometry: feature.geometry,\r\n        }))\r\n      );\r\n      filteredLevel2Features.push(\r\n        ...outputLevel2Data.map((feature) => ({\r\n          type: 'Feature',\r\n          properties: feature.properties,\r\n          geometry: feature.geometry,\r\n        }))\r\n      );\r\n    }\r\n  \r\n    const filteredData = {\r\n      filteredCountryData: {\r\n        type: 'FeatureCollection',\r\n        features: filteredCountryFeatures,\r\n      },\r\n      filteredLevel1Data: {\r\n        type: 'FeatureCollection',\r\n        features: filteredLevel1Features,\r\n      },\r\n      filteredLevel2Data: {\r\n        type: 'FeatureCollection',\r\n        features: filteredLevel2Features,\r\n      },\r\n    };\r\n  \r\n    console.log('Filtered Country data:', filteredData.filteredCountryData); // this has to be sent to App\r\n    console.log('Filtered Lv1 data:', filteredData.filteredLevel1Data);\r\n    console.log('Filtered Lv2 data:', filteredData.filteredLevel2Data);\r\n  \r\n    handleFilteredDataChange(filteredData);\r\n  }, [filterCountry, level1Filter, level2Filter, outputCountryData, outputLevel1Data, outputLevel2Data]);\r\n      \r\n  return (\r\n    <div>\r\n      <h1></h1>\r\n      <div className=\"filter-section\">\r\n        <StaticFilterOptions\r\n          title=\"Country\"\r\n          options={countryOptions}\r\n          selectedOptions={filterCountry}\r\n          setSelectedOptions={setFilterCountry}\r\n        />\r\n      </div>\r\n      <div className=\"filter-section\">\r\n        <StaticFilterOptions\r\n          title=\"Level 1 Name\"\r\n          options={level1Options}\r\n          selectedOptions={level1Filter}\r\n          setSelectedOptions={setLevel1Filter}\r\n        />\r\n      </div>\r\n      <div className=\"filter-section\">\r\n        <StaticFilterOptions\r\n          title=\"Level 2 Name\"\r\n          options={level2Options}\r\n          selectedOptions={level2Filter}\r\n          setSelectedOptions={setLevel2Filter}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mapfilter;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport MapView from './components/MapView';\r\nimport Table from './components/Table';\r\nimport Timebar from './components/Timebar';\r\nimport Sidebar from './components/Sidebar';\r\nimport Draft from './components/Draft';\r\nimport Mapfilter from './components/Mapfilter';\r\nimport DraftRow from './components/DraftRow';\r\n\r\nexport default function App() {\r\n    const [countryData, setCountryData] = useState(null);\r\n    const [level1Data, setLevel1Data] = useState(null);\r\n    const [level2Data, setLevel2Data] = useState(null);//for diff layers\r\n    const [selectedYear, setSelectedYear] = useState(2023);\r\n    const [selectedMonth, setSelectedMonth] = useState(3);\r\n    const [hoveredRegion, setHoveredRegion] = useState(null);\r\n    const [filteredData, setFilteredData] = useState({\r\n      filteredCountryData: [],\r\n      filteredLevel1Data: [],\r\n      filteredLevel2Data: [],\r\n    });\r\n    const handleFilteredDataChange = (filteredData) => {\r\n      setFilteredData(filteredData);\r\n    };\r\n\r\n    const handleYearChange = (year) => {\r\n      setSelectedYear(year);\r\n    };\r\n    const handleMonthChange = (month) => {\r\n      setSelectedMonth(month);\r\n    };\r\n    \r\n    const handleRegionChange= (region) => { \r\n      setHoveredRegion(region);\r\n      \r\n    };\r\n    \r\n  \r\n\r\n    useEffect(() => { //la data de draft si cambia porque esta dentro de UseEffect\r\n        async function fetchData() {\r\n          try {\r\n            const responseCountry = await axios.get('./data/output_country.geojson');\r\n            setCountryData(responseCountry.data);\r\n    \r\n            const responseLevel1 = await axios.get('./data/output_level1.geojson');\r\n            setLevel1Data(responseLevel1.data);\r\n    \r\n            const responseLevel2 = await axios.get('./data/output_level2.geojson');\r\n            setLevel2Data(responseLevel2.data);\r\n              console.log(responseLevel1,responseLevel2,'response levels');\r\n\r\n          } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n          }\r\n        }\r\n    \r\n        fetchData();\r\n      }, []);\r\n\r\n    \r\n\r\n  return (\r\n    <div>\r\n      <MapView regionInfo={hoveredRegion} onChangeYear={handleYearChange} onChangeRegion={handleRegionChange} selectedYear={selectedYear} onChangeMonth={handleMonthChange} selectedMonth={selectedMonth}/>\r\n      \r\n      <Timebar onChangeYear={handleYearChange} selectedYear={selectedYear} onChangeMonth={handleMonthChange} selectedMonth={selectedMonth} />\r\n      <Sidebar countryData={countryData} level1Data={level1Data} level2Data={level2Data} regionInfo={hoveredRegion} onChangeYear={handleYearChange} selectedYear={selectedYear} onChangeMonth={handleMonthChange} selectedMonth={selectedMonth} /> \r\n      <Mapfilter handleFilteredDataChange={handleFilteredDataChange}/>\r\n      <div><Draft countryData={filteredData.filteredCountryData} level1Data={level1Data} level2Data={level2Data} onChangeYear={handleYearChange} selectedYear={selectedYear} onChangeMonth={handleMonthChange} selectedMonth={selectedMonth}/></div>\r\n\r\n    \r\n      \r\n\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}